// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type IssueInfoT struct {
	Symbol string `json:"symbol"`
	IssuePrice float64 `json:"issue_price"`
	IssueMethodCode string `json:"issue_method_code"`
	IssueMethodDscrpt string `json:"issue_method_dscrpt"`
	DateTime int64 `json:"date_time"`
}

func (t *IssueInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	issueMethodCodeOffset := flatbuffers.UOffsetT(0)
	if t.IssueMethodCode != "" {
		issueMethodCodeOffset = builder.CreateString(t.IssueMethodCode)
	}
	issueMethodDscrptOffset := flatbuffers.UOffsetT(0)
	if t.IssueMethodDscrpt != "" {
		issueMethodDscrptOffset = builder.CreateString(t.IssueMethodDscrpt)
	}
	IssueInfoStart(builder)
	IssueInfoAddSymbol(builder, symbolOffset)
	IssueInfoAddIssuePrice(builder, t.IssuePrice)
	IssueInfoAddIssueMethodCode(builder, issueMethodCodeOffset)
	IssueInfoAddIssueMethodDscrpt(builder, issueMethodDscrptOffset)
	IssueInfoAddDateTime(builder, t.DateTime)
	return IssueInfoEnd(builder)
}

func (rcv *IssueInfo) UnPackTo(t *IssueInfoT) {
	t.Symbol = string(rcv.Symbol())
	t.IssuePrice = rcv.IssuePrice()
	t.IssueMethodCode = string(rcv.IssueMethodCode())
	t.IssueMethodDscrpt = string(rcv.IssueMethodDscrpt())
	t.DateTime = rcv.DateTime()
}

func (rcv *IssueInfo) UnPack() *IssueInfoT {
	if rcv == nil {
		return nil
	}
	t := &IssueInfoT{}
	rcv.UnPackTo(t)
	return t
}

type IssueInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsIssueInfo(buf []byte, offset flatbuffers.UOffsetT) *IssueInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IssueInfo{}
	x.Init(buf, n+offset)
	return x
}

func FinishIssueInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsIssueInfo(buf []byte, offset flatbuffers.UOffsetT) *IssueInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IssueInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIssueInfoBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *IssueInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IssueInfo) Table() flatbuffers.Table {
	return rcv._tab
}

/// 证券代码
func (rcv *IssueInfo) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券代码
/// 发行价格
func (rcv *IssueInfo) IssuePrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 发行价格
func (rcv *IssueInfo) MutateIssuePrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// 发行方式编码
func (rcv *IssueInfo) IssueMethodCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 发行方式编码
/// 发行方式说明
func (rcv *IssueInfo) IssueMethodDscrpt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 发行方式说明
/// 日期，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *IssueInfo) DateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 日期，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *IssueInfo) MutateDateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func IssueInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func IssueInfoAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(symbol), 0)
}
func IssueInfoAddIssuePrice(builder *flatbuffers.Builder, issuePrice float64) {
	builder.PrependFloat64Slot(1, issuePrice, 0.0)
}
func IssueInfoAddIssueMethodCode(builder *flatbuffers.Builder, issueMethodCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(issueMethodCode), 0)
}
func IssueInfoAddIssueMethodDscrpt(builder *flatbuffers.Builder, issueMethodDscrpt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(issueMethodDscrpt), 0)
}
func IssueInfoAddDateTime(builder *flatbuffers.Builder, dateTime int64) {
	builder.PrependInt64Slot(4, dateTime, 0)
}
func IssueInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
