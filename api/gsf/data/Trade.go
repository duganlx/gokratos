// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TradeT struct {
	AuCode string `json:"au_code"`
	Symbol string `json:"symbol"`
	SecCnName string `json:"sec_cn_name"`
	Side OrderSide `json:"side"`
	Offset OrderOffset `json:"offset"`
	TradeId string `json:"trade_id"`
	OrderId string `json:"order_id"`
	OrderOrigId string `json:"order_orig_id"`
	TradedPrice float64 `json:"traded_price"`
	TradedVolume int64 `json:"traded_volume"`
	Commission float64 `json:"commission"`
	CommissionAsset string `json:"commission_asset"`
	CreateTime int64 `json:"create_time"`
	UpdateTime int64 `json:"update_time"`
	TradeDate int64 `json:"trade_date"`
	OperatorId string `json:"operator_id"`
	EamCode int64 `json:"eam_code"`
}

func (t *TradeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	tradeIdOffset := flatbuffers.UOffsetT(0)
	if t.TradeId != "" {
		tradeIdOffset = builder.CreateString(t.TradeId)
	}
	orderIdOffset := flatbuffers.UOffsetT(0)
	if t.OrderId != "" {
		orderIdOffset = builder.CreateString(t.OrderId)
	}
	orderOrigIdOffset := flatbuffers.UOffsetT(0)
	if t.OrderOrigId != "" {
		orderOrigIdOffset = builder.CreateString(t.OrderOrigId)
	}
	commissionAssetOffset := flatbuffers.UOffsetT(0)
	if t.CommissionAsset != "" {
		commissionAssetOffset = builder.CreateString(t.CommissionAsset)
	}
	operatorIdOffset := flatbuffers.UOffsetT(0)
	if t.OperatorId != "" {
		operatorIdOffset = builder.CreateString(t.OperatorId)
	}
	TradeStart(builder)
	TradeAddAuCode(builder, auCodeOffset)
	TradeAddSymbol(builder, symbolOffset)
	TradeAddSecCnName(builder, secCnNameOffset)
	TradeAddSide(builder, t.Side)
	TradeAddOffset(builder, t.Offset)
	TradeAddTradeId(builder, tradeIdOffset)
	TradeAddOrderId(builder, orderIdOffset)
	TradeAddOrderOrigId(builder, orderOrigIdOffset)
	TradeAddTradedPrice(builder, t.TradedPrice)
	TradeAddTradedVolume(builder, t.TradedVolume)
	TradeAddCommission(builder, t.Commission)
	TradeAddCommissionAsset(builder, commissionAssetOffset)
	TradeAddCreateTime(builder, t.CreateTime)
	TradeAddUpdateTime(builder, t.UpdateTime)
	TradeAddTradeDate(builder, t.TradeDate)
	TradeAddOperatorId(builder, operatorIdOffset)
	TradeAddEamCode(builder, t.EamCode)
	return TradeEnd(builder)
}

func (rcv *Trade) UnPackTo(t *TradeT) {
	t.AuCode = string(rcv.AuCode())
	t.Symbol = string(rcv.Symbol())
	t.SecCnName = string(rcv.SecCnName())
	t.Side = rcv.Side()
	t.Offset = rcv.Offset()
	t.TradeId = string(rcv.TradeId())
	t.OrderId = string(rcv.OrderId())
	t.OrderOrigId = string(rcv.OrderOrigId())
	t.TradedPrice = rcv.TradedPrice()
	t.TradedVolume = rcv.TradedVolume()
	t.Commission = rcv.Commission()
	t.CommissionAsset = string(rcv.CommissionAsset())
	t.CreateTime = rcv.CreateTime()
	t.UpdateTime = rcv.UpdateTime()
	t.TradeDate = rcv.TradeDate()
	t.OperatorId = string(rcv.OperatorId())
	t.EamCode = rcv.EamCode()
}

func (rcv *Trade) UnPack() *TradeT {
	if rcv == nil {
		return nil
	}
	t := &TradeT{}
	rcv.UnPackTo(t)
	return t
}

type Trade struct {
	_tab flatbuffers.Table
}

func GetRootAsTrade(buf []byte, offset flatbuffers.UOffsetT) *Trade {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Trade{}
	x.Init(buf, n+offset)
	return x
}

func FinishTradeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTrade(buf []byte, offset flatbuffers.UOffsetT) *Trade {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Trade{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTradeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Trade) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Trade) Table() flatbuffers.Table {
	return rcv._tab
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
func (rcv *Trade) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
func (rcv *Trade) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
///中文名称
func (rcv *Trade) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///中文名称
///买卖方向
func (rcv *Trade) Side() OrderSide {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return OrderSide(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

///买卖方向
func (rcv *Trade) MutateSide(n OrderSide) bool {
	return rcv._tab.MutateInt16Slot(10, int16(n))
}

///开平标志, 默认为DEFAULT
func (rcv *Trade) Offset() OrderOffset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return OrderOffset(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

///开平标志, 默认为DEFAULT
func (rcv *Trade) MutateOffset(n OrderOffset) bool {
	return rcv._tab.MutateInt16Slot(12, int16(n))
}

///成交编号
func (rcv *Trade) TradeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///成交编号
///委托序号
func (rcv *Trade) OrderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///委托序号
///内部委托信息，例如母单信息
func (rcv *Trade) OrderOrigId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///内部委托信息，例如母单信息
///成交价格
func (rcv *Trade) TradedPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///成交价格
func (rcv *Trade) MutateTradedPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

///成交数量
func (rcv *Trade) TradedVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///成交数量
func (rcv *Trade) MutateTradedVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

///佣金费用
func (rcv *Trade) Commission() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///佣金费用
func (rcv *Trade) MutateCommission(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

///佣金支付资产/币种，默认CNY，用于支持多币种佣金(例如：BTC, ETH, USDT等)
func (rcv *Trade) CommissionAsset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///佣金支付资产/币种，默认CNY，用于支持多币种佣金(例如：BTC, ETH, USDT等)
/// 委托时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Trade) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 委托时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Trade) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Trade) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Trade) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

///交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Trade) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Trade) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

///操作员号
func (rcv *Trade) OperatorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///操作员号
///EAM内部代码
func (rcv *Trade) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *Trade) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func TradeStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func TradeAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auCode), 0)
}
func TradeAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func TradeAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(secCnName), 0)
}
func TradeAddSide(builder *flatbuffers.Builder, side OrderSide) {
	builder.PrependInt16Slot(3, int16(side), 0)
}
func TradeAddOffset(builder *flatbuffers.Builder, offset OrderOffset) {
	builder.PrependInt16Slot(4, int16(offset), 0)
}
func TradeAddTradeId(builder *flatbuffers.Builder, tradeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tradeId), 0)
}
func TradeAddOrderId(builder *flatbuffers.Builder, orderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(orderId), 0)
}
func TradeAddOrderOrigId(builder *flatbuffers.Builder, orderOrigId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(orderOrigId), 0)
}
func TradeAddTradedPrice(builder *flatbuffers.Builder, tradedPrice float64) {
	builder.PrependFloat64Slot(8, tradedPrice, 0.0)
}
func TradeAddTradedVolume(builder *flatbuffers.Builder, tradedVolume int64) {
	builder.PrependInt64Slot(9, tradedVolume, 0)
}
func TradeAddCommission(builder *flatbuffers.Builder, commission float64) {
	builder.PrependFloat64Slot(10, commission, 0.0)
}
func TradeAddCommissionAsset(builder *flatbuffers.Builder, commissionAsset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(commissionAsset), 0)
}
func TradeAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(12, createTime, 0)
}
func TradeAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(13, updateTime, 0)
}
func TradeAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(14, tradeDate, 0)
}
func TradeAddOperatorId(builder *flatbuffers.Builder, operatorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(operatorId), 0)
}
func TradeAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(16, eamCode, 0)
}
func TradeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
