// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EquityTransitT struct {
	Id string `json:"id"`
	AuCode string `json:"au_code"`
	Symbol string `json:"symbol"`
	SecCnName string `json:"sec_cn_name"`
	Market string `json:"market"`
	TransitSide TransitSide `json:"transit_side"`
	TransitType TransitType `json:"transit_type"`
	Side OrderSide `json:"side"`
	Price float64 `json:"price"`
	Volume int64 `json:"volume"`
	Amount float64 `json:"amount"`
	Fee float64 `json:"fee"`
	Remark string `json:"remark"`
	OccurTime int64 `json:"occur_time"`
	OccurDate int32 `json:"occur_date"`
	SettleDate int64 `json:"settle_date"`
	EamCode int64 `json:"eam_code"`
}

func (t *EquityTransitT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	idOffset := flatbuffers.UOffsetT(0)
	if t.Id != "" {
		idOffset = builder.CreateString(t.Id)
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	marketOffset := flatbuffers.UOffsetT(0)
	if t.Market != "" {
		marketOffset = builder.CreateString(t.Market)
	}
	remarkOffset := flatbuffers.UOffsetT(0)
	if t.Remark != "" {
		remarkOffset = builder.CreateString(t.Remark)
	}
	EquityTransitStart(builder)
	EquityTransitAddId(builder, idOffset)
	EquityTransitAddAuCode(builder, auCodeOffset)
	EquityTransitAddSymbol(builder, symbolOffset)
	EquityTransitAddSecCnName(builder, secCnNameOffset)
	EquityTransitAddMarket(builder, marketOffset)
	EquityTransitAddTransitSide(builder, t.TransitSide)
	EquityTransitAddTransitType(builder, t.TransitType)
	EquityTransitAddSide(builder, t.Side)
	EquityTransitAddPrice(builder, t.Price)
	EquityTransitAddVolume(builder, t.Volume)
	EquityTransitAddAmount(builder, t.Amount)
	EquityTransitAddFee(builder, t.Fee)
	EquityTransitAddRemark(builder, remarkOffset)
	EquityTransitAddOccurTime(builder, t.OccurTime)
	EquityTransitAddOccurDate(builder, t.OccurDate)
	EquityTransitAddSettleDate(builder, t.SettleDate)
	EquityTransitAddEamCode(builder, t.EamCode)
	return EquityTransitEnd(builder)
}

func (rcv *EquityTransit) UnPackTo(t *EquityTransitT) {
	t.Id = string(rcv.Id())
	t.AuCode = string(rcv.AuCode())
	t.Symbol = string(rcv.Symbol())
	t.SecCnName = string(rcv.SecCnName())
	t.Market = string(rcv.Market())
	t.TransitSide = rcv.TransitSide()
	t.TransitType = rcv.TransitType()
	t.Side = rcv.Side()
	t.Price = rcv.Price()
	t.Volume = rcv.Volume()
	t.Amount = rcv.Amount()
	t.Fee = rcv.Fee()
	t.Remark = string(rcv.Remark())
	t.OccurTime = rcv.OccurTime()
	t.OccurDate = rcv.OccurDate()
	t.SettleDate = rcv.SettleDate()
	t.EamCode = rcv.EamCode()
}

func (rcv *EquityTransit) UnPack() *EquityTransitT {
	if rcv == nil {
		return nil
	}
	t := &EquityTransitT{}
	rcv.UnPackTo(t)
	return t
}

type EquityTransit struct {
	_tab flatbuffers.Table
}

func GetRootAsEquityTransit(buf []byte, offset flatbuffers.UOffsetT) *EquityTransit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EquityTransit{}
	x.Init(buf, n+offset)
	return x
}

func FinishEquityTransitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEquityTransit(buf []byte, offset flatbuffers.UOffsetT) *EquityTransit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EquityTransit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEquityTransitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EquityTransit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EquityTransit) Table() flatbuffers.Table {
	return rcv._tab
}

/// 交易流水号
func (rcv *EquityTransit) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 交易流水号
/// 资产单元
func (rcv *EquityTransit) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元
/// 证券代码
func (rcv *EquityTransit) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券代码
/// 证券名称 (可为空)
func (rcv *EquityTransit) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券名称 (可为空)
/// 市场 (可为空)
func (rcv *EquityTransit) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 市场 (可为空)
/// 转入转出方向，样例：0 - DEPOSIT，1 - WITHDRAW
func (rcv *EquityTransit) TransitSide() TransitSide {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return TransitSide(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 转入转出方向，样例：0 - DEPOSIT，1 - WITHDRAW
func (rcv *EquityTransit) MutateTransitSide(n TransitSide) bool {
	return rcv._tab.MutateInt16Slot(14, int16(n))
}

/// 转入转出类型，样例：0 - DEFAULT，-1 - COST，1 - INCOME，2 - TRANSFER
func (rcv *EquityTransit) TransitType() TransitType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return TransitType(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 转入转出类型，样例：0 - DEFAULT，-1 - COST，1 - INCOME，2 - TRANSFER
func (rcv *EquityTransit) MutateTransitType(n TransitType) bool {
	return rcv._tab.MutateInt16Slot(16, int16(n))
}

///买卖方向，默认为买入(现货)
func (rcv *EquityTransit) Side() OrderSide {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return OrderSide(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

///买卖方向，默认为买入(现货)
func (rcv *EquityTransit) MutateSide(n OrderSide) bool {
	return rcv._tab.MutateInt16Slot(18, int16(n))
}

/// 成本价
func (rcv *EquityTransit) Price() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 成本价
func (rcv *EquityTransit) MutatePrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// 交易数量
func (rcv *EquityTransit) Volume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易数量
func (rcv *EquityTransit) MutateVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

/// 交易金额 (可为空)
func (rcv *EquityTransit) Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 交易金额 (可为空)
func (rcv *EquityTransit) MutateAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 交易费用
func (rcv *EquityTransit) Fee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 交易费用
func (rcv *EquityTransit) MutateFee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// 交易说明
func (rcv *EquityTransit) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 交易说明
/// 发生时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *EquityTransit) OccurTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 发生时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *EquityTransit) MutateOccurTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

/// 发生日期，样例：20200701
func (rcv *EquityTransit) OccurDate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 发生日期，样例：20200701
func (rcv *EquityTransit) MutateOccurDate(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// 交割日期，Epoch时间(13位数字，UTC时区)，样例：1676017139000
/// 交割日期表示在当日开盘前，资金到账
func (rcv *EquityTransit) SettleDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交割日期，Epoch时间(13位数字，UTC时区)，样例：1676017139000
/// 交割日期表示在当日开盘前，资金到账
func (rcv *EquityTransit) MutateSettleDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

///EAM内部代码
func (rcv *EquityTransit) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *EquityTransit) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func EquityTransitStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func EquityTransitAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EquityTransitAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(auCode), 0)
}
func EquityTransitAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(symbol), 0)
}
func EquityTransitAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(secCnName), 0)
}
func EquityTransitAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(market), 0)
}
func EquityTransitAddTransitSide(builder *flatbuffers.Builder, transitSide TransitSide) {
	builder.PrependInt16Slot(5, int16(transitSide), 0)
}
func EquityTransitAddTransitType(builder *flatbuffers.Builder, transitType TransitType) {
	builder.PrependInt16Slot(6, int16(transitType), 0)
}
func EquityTransitAddSide(builder *flatbuffers.Builder, side OrderSide) {
	builder.PrependInt16Slot(7, int16(side), 0)
}
func EquityTransitAddPrice(builder *flatbuffers.Builder, price float64) {
	builder.PrependFloat64Slot(8, price, 0.0)
}
func EquityTransitAddVolume(builder *flatbuffers.Builder, volume int64) {
	builder.PrependInt64Slot(9, volume, 0)
}
func EquityTransitAddAmount(builder *flatbuffers.Builder, amount float64) {
	builder.PrependFloat64Slot(10, amount, 0.0)
}
func EquityTransitAddFee(builder *flatbuffers.Builder, fee float64) {
	builder.PrependFloat64Slot(11, fee, 0.0)
}
func EquityTransitAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(remark), 0)
}
func EquityTransitAddOccurTime(builder *flatbuffers.Builder, occurTime int64) {
	builder.PrependInt64Slot(13, occurTime, 0)
}
func EquityTransitAddOccurDate(builder *flatbuffers.Builder, occurDate int32) {
	builder.PrependInt32Slot(14, occurDate, 0)
}
func EquityTransitAddSettleDate(builder *flatbuffers.Builder, settleDate int64) {
	builder.PrependInt64Slot(15, settleDate, 0)
}
func EquityTransitAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(16, eamCode, 0)
}
func EquityTransitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
