// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GoalPositionT struct {
	AuCode string `json:"au_code"`
	Symbol string `json:"symbol"`
	SecCnName string `json:"sec_cn_name"`
	GoalPosition int64 `json:"goal_position"`
	GoalPrice float64 `json:"goal_price"`
	CreateTime int64 `json:"create_time"`
	UpdateTime int64 `json:"update_time"`
	TradeDate int64 `json:"trade_date"`
	Remark string `json:"remark"`
	EamCode int64 `json:"eam_code"`
}

func (t *GoalPositionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	remarkOffset := flatbuffers.UOffsetT(0)
	if t.Remark != "" {
		remarkOffset = builder.CreateString(t.Remark)
	}
	GoalPositionStart(builder)
	GoalPositionAddAuCode(builder, auCodeOffset)
	GoalPositionAddSymbol(builder, symbolOffset)
	GoalPositionAddSecCnName(builder, secCnNameOffset)
	GoalPositionAddGoalPosition(builder, t.GoalPosition)
	GoalPositionAddGoalPrice(builder, t.GoalPrice)
	GoalPositionAddCreateTime(builder, t.CreateTime)
	GoalPositionAddUpdateTime(builder, t.UpdateTime)
	GoalPositionAddTradeDate(builder, t.TradeDate)
	GoalPositionAddRemark(builder, remarkOffset)
	GoalPositionAddEamCode(builder, t.EamCode)
	return GoalPositionEnd(builder)
}

func (rcv *GoalPosition) UnPackTo(t *GoalPositionT) {
	t.AuCode = string(rcv.AuCode())
	t.Symbol = string(rcv.Symbol())
	t.SecCnName = string(rcv.SecCnName())
	t.GoalPosition = rcv.GoalPosition()
	t.GoalPrice = rcv.GoalPrice()
	t.CreateTime = rcv.CreateTime()
	t.UpdateTime = rcv.UpdateTime()
	t.TradeDate = rcv.TradeDate()
	t.Remark = string(rcv.Remark())
	t.EamCode = rcv.EamCode()
}

func (rcv *GoalPosition) UnPack() *GoalPositionT {
	if rcv == nil {
		return nil
	}
	t := &GoalPositionT{}
	rcv.UnPackTo(t)
	return t
}

type GoalPosition struct {
	_tab flatbuffers.Table
}

func GetRootAsGoalPosition(buf []byte, offset flatbuffers.UOffsetT) *GoalPosition {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GoalPosition{}
	x.Init(buf, n+offset)
	return x
}

func FinishGoalPositionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGoalPosition(buf []byte, offset flatbuffers.UOffsetT) *GoalPosition {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GoalPosition{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGoalPositionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GoalPosition) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GoalPosition) Table() flatbuffers.Table {
	return rcv._tab
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
func (rcv *GoalPosition) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
func (rcv *GoalPosition) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
///中文名称
func (rcv *GoalPosition) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///中文名称
/// 目标持仓(单位:股), 分正负
func (rcv *GoalPosition) GoalPosition() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 目标持仓(单位:股), 分正负
func (rcv *GoalPosition) MutateGoalPosition(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

/// 目标价格(选填)
func (rcv *GoalPosition) GoalPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 目标价格(选填)
func (rcv *GoalPosition) MutateGoalPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *GoalPosition) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *GoalPosition) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *GoalPosition) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *GoalPosition) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *GoalPosition) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *GoalPosition) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

/// 备注
func (rcv *GoalPosition) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 备注
///EAM内部代码
func (rcv *GoalPosition) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *GoalPosition) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

func GoalPositionStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func GoalPositionAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auCode), 0)
}
func GoalPositionAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func GoalPositionAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(secCnName), 0)
}
func GoalPositionAddGoalPosition(builder *flatbuffers.Builder, goalPosition int64) {
	builder.PrependInt64Slot(3, goalPosition, 0)
}
func GoalPositionAddGoalPrice(builder *flatbuffers.Builder, goalPrice float64) {
	builder.PrependFloat64Slot(4, goalPrice, 0.0)
}
func GoalPositionAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(5, createTime, 0)
}
func GoalPositionAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(6, updateTime, 0)
}
func GoalPositionAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(7, tradeDate, 0)
}
func GoalPositionAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(remark), 0)
}
func GoalPositionAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(9, eamCode, 0)
}
func GoalPositionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
