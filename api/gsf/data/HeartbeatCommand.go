// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HeartbeatCommandT struct {
	Time int64 `json:"time"`
}

func (t *HeartbeatCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	HeartbeatCommandStart(builder)
	HeartbeatCommandAddTime(builder, t.Time)
	return HeartbeatCommandEnd(builder)
}

func (rcv *HeartbeatCommand) UnPackTo(t *HeartbeatCommandT) {
	t.Time = rcv.Time()
}

func (rcv *HeartbeatCommand) UnPack() *HeartbeatCommandT {
	if rcv == nil {
		return nil
	}
	t := &HeartbeatCommandT{}
	rcv.UnPackTo(t)
	return t
}

type HeartbeatCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsHeartbeatCommand(buf []byte, offset flatbuffers.UOffsetT) *HeartbeatCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HeartbeatCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishHeartbeatCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsHeartbeatCommand(buf []byte, offset flatbuffers.UOffsetT) *HeartbeatCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HeartbeatCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHeartbeatCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *HeartbeatCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HeartbeatCommand) Table() flatbuffers.Table {
	return rcv._tab
}

/// 时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *HeartbeatCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *HeartbeatCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func HeartbeatCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func HeartbeatCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func HeartbeatCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
