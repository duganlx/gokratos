// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BarT struct {
	Symbol string `json:"symbol"`
	EpochTime int64 `json:"epoch_time"`
	Time uint32 `json:"time"`
	PreClose float64 `json:"pre_close"`
	Open float64 `json:"open"`
	High float64 `json:"high"`
	Low float64 `json:"low"`
	Close float64 `json:"close"`
	NumTrades int32 `json:"num_trades"`
	Volume int64 `json:"volume"`
	Amount float64 `json:"amount"`
	UpperLimit float64 `json:"upper_limit"`
	LowerLimit float64 `json:"lower_limit"`
	TotalVolume uint64 `json:"total_volume"`
	TotalAmount float64 `json:"total_amount"`
	TradeDate int64 `json:"trade_date"`
	Settle float64 `json:"settle"`
	EamCode int64 `json:"eam_code"`
}

func (t *BarT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	BarStart(builder)
	BarAddSymbol(builder, symbolOffset)
	BarAddEpochTime(builder, t.EpochTime)
	BarAddTime(builder, t.Time)
	BarAddPreClose(builder, t.PreClose)
	BarAddOpen(builder, t.Open)
	BarAddHigh(builder, t.High)
	BarAddLow(builder, t.Low)
	BarAddClose(builder, t.Close)
	BarAddNumTrades(builder, t.NumTrades)
	BarAddVolume(builder, t.Volume)
	BarAddAmount(builder, t.Amount)
	BarAddUpperLimit(builder, t.UpperLimit)
	BarAddLowerLimit(builder, t.LowerLimit)
	BarAddTotalVolume(builder, t.TotalVolume)
	BarAddTotalAmount(builder, t.TotalAmount)
	BarAddTradeDate(builder, t.TradeDate)
	BarAddSettle(builder, t.Settle)
	BarAddEamCode(builder, t.EamCode)
	return BarEnd(builder)
}

func (rcv *Bar) UnPackTo(t *BarT) {
	t.Symbol = string(rcv.Symbol())
	t.EpochTime = rcv.EpochTime()
	t.Time = rcv.Time()
	t.PreClose = rcv.PreClose()
	t.Open = rcv.Open()
	t.High = rcv.High()
	t.Low = rcv.Low()
	t.Close = rcv.Close()
	t.NumTrades = rcv.NumTrades()
	t.Volume = rcv.Volume()
	t.Amount = rcv.Amount()
	t.UpperLimit = rcv.UpperLimit()
	t.LowerLimit = rcv.LowerLimit()
	t.TotalVolume = rcv.TotalVolume()
	t.TotalAmount = rcv.TotalAmount()
	t.TradeDate = rcv.TradeDate()
	t.Settle = rcv.Settle()
	t.EamCode = rcv.EamCode()
}

func (rcv *Bar) UnPack() *BarT {
	if rcv == nil {
		return nil
	}
	t := &BarT{}
	rcv.UnPackTo(t)
	return t
}

type Bar struct {
	_tab flatbuffers.Table
}

func GetRootAsBar(buf []byte, offset flatbuffers.UOffsetT) *Bar {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Bar{}
	x.Init(buf, n+offset)
	return x
}

func FinishBarBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBar(buf []byte, offset flatbuffers.UOffsetT) *Bar {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Bar{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBarBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Bar) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Bar) Table() flatbuffers.Table {
	return rcv._tab
}

/// 品种代码
func (rcv *Bar) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 品种代码
/// 行情日期时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Bar) EpochTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 行情日期时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Bar) MutateEpochTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

/// 行情时间(整数形式)，HHMMSSmmm 样例：93000500或者153000000
func (rcv *Bar) Time() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// 行情时间(整数形式)，HHMMSSmmm 样例：93000500或者153000000
func (rcv *Bar) MutateTime(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

/// 前收盘价
func (rcv *Bar) PreClose() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 前收盘价
func (rcv *Bar) MutatePreClose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// 开盘价
func (rcv *Bar) Open() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 开盘价
func (rcv *Bar) MutateOpen(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// 最高价
func (rcv *Bar) High() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 最高价
func (rcv *Bar) MutateHigh(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// 最低价
func (rcv *Bar) Low() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 最低价
func (rcv *Bar) MutateLow(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// 收盘价
func (rcv *Bar) Close() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 收盘价
func (rcv *Bar) MutateClose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// 成交笔数
func (rcv *Bar) NumTrades() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 成交笔数
func (rcv *Bar) MutateNumTrades(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// 成交量
func (rcv *Bar) Volume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 成交量
func (rcv *Bar) MutateVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

/// 成交额
func (rcv *Bar) Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 成交额
func (rcv *Bar) MutateAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 涨停价
func (rcv *Bar) UpperLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 涨停价
func (rcv *Bar) MutateUpperLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// 跌停价
func (rcv *Bar) LowerLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 跌停价
func (rcv *Bar) MutateLowerLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// 成交总量
func (rcv *Bar) TotalVolume() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// 成交总量
func (rcv *Bar) MutateTotalVolume(n uint64) bool {
	return rcv._tab.MutateUint64Slot(30, n)
}

/// 成交总金额
func (rcv *Bar) TotalAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 成交总金额
func (rcv *Bar) MutateTotalAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Bar) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Bar) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

/// 结算价，非衍生品结算价等于收盘价
func (rcv *Bar) Settle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 结算价，非衍生品结算价等于收盘价
func (rcv *Bar) MutateSettle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

///EAM内部代码
func (rcv *Bar) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *Bar) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func BarStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func BarAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(symbol), 0)
}
func BarAddEpochTime(builder *flatbuffers.Builder, epochTime int64) {
	builder.PrependInt64Slot(1, epochTime, 0)
}
func BarAddTime(builder *flatbuffers.Builder, time uint32) {
	builder.PrependUint32Slot(2, time, 0)
}
func BarAddPreClose(builder *flatbuffers.Builder, preClose float64) {
	builder.PrependFloat64Slot(3, preClose, 0.0)
}
func BarAddOpen(builder *flatbuffers.Builder, open float64) {
	builder.PrependFloat64Slot(4, open, 0.0)
}
func BarAddHigh(builder *flatbuffers.Builder, high float64) {
	builder.PrependFloat64Slot(5, high, 0.0)
}
func BarAddLow(builder *flatbuffers.Builder, low float64) {
	builder.PrependFloat64Slot(6, low, 0.0)
}
func BarAddClose(builder *flatbuffers.Builder, close float64) {
	builder.PrependFloat64Slot(7, close, 0.0)
}
func BarAddNumTrades(builder *flatbuffers.Builder, numTrades int32) {
	builder.PrependInt32Slot(8, numTrades, 0)
}
func BarAddVolume(builder *flatbuffers.Builder, volume int64) {
	builder.PrependInt64Slot(9, volume, 0)
}
func BarAddAmount(builder *flatbuffers.Builder, amount float64) {
	builder.PrependFloat64Slot(10, amount, 0.0)
}
func BarAddUpperLimit(builder *flatbuffers.Builder, upperLimit float64) {
	builder.PrependFloat64Slot(11, upperLimit, 0.0)
}
func BarAddLowerLimit(builder *flatbuffers.Builder, lowerLimit float64) {
	builder.PrependFloat64Slot(12, lowerLimit, 0.0)
}
func BarAddTotalVolume(builder *flatbuffers.Builder, totalVolume uint64) {
	builder.PrependUint64Slot(13, totalVolume, 0)
}
func BarAddTotalAmount(builder *flatbuffers.Builder, totalAmount float64) {
	builder.PrependFloat64Slot(14, totalAmount, 0.0)
}
func BarAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(15, tradeDate, 0)
}
func BarAddSettle(builder *flatbuffers.Builder, settle float64) {
	builder.PrependFloat64Slot(16, settle, 0.0)
}
func BarAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(17, eamCode, 0)
}
func BarEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
