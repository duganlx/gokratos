// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SymbolT struct {
	TradeDate int64 `json:"trade_date"`
	Type int64 `json:"type"`
	Status int32 `json:"status"`
	Symbol string `json:"symbol"`
	SecCnName string `json:"sec_cn_name"`
	Market string `json:"market"`
	CodeId string `json:"code_id"`
	PreClose float64 `json:"pre_close"`
	UpperLimit float64 `json:"upper_limit"`
	LowerLimit float64 `json:"lower_limit"`
	PriceTick float64 `json:"price_tick"`
	MaxMarketOrderVolume int64 `json:"max_market_order_volume"`
	MinMarketOrderVolume int64 `json:"min_market_order_volume"`
	MaxLimitOrderVolume int64 `json:"max_limit_order_volume"`
	MinLimitOrderVolume int64 `json:"min_limit_order_volume"`
	InstrumentMultiple int64 `json:"instrument_multiple"`
	TradeAttribute int64 `json:"trade_attribute"`
	SettleAttribute int64 `json:"settle_attribute"`
	AdjustFactor float64 `json:"adjust_factor"`
	StInfo int32 `json:"st_info"`
}

func (t *SymbolT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	marketOffset := flatbuffers.UOffsetT(0)
	if t.Market != "" {
		marketOffset = builder.CreateString(t.Market)
	}
	codeIdOffset := flatbuffers.UOffsetT(0)
	if t.CodeId != "" {
		codeIdOffset = builder.CreateString(t.CodeId)
	}
	SymbolStart(builder)
	SymbolAddTradeDate(builder, t.TradeDate)
	SymbolAddType(builder, t.Type)
	SymbolAddStatus(builder, t.Status)
	SymbolAddSymbol(builder, symbolOffset)
	SymbolAddSecCnName(builder, secCnNameOffset)
	SymbolAddMarket(builder, marketOffset)
	SymbolAddCodeId(builder, codeIdOffset)
	SymbolAddPreClose(builder, t.PreClose)
	SymbolAddUpperLimit(builder, t.UpperLimit)
	SymbolAddLowerLimit(builder, t.LowerLimit)
	SymbolAddPriceTick(builder, t.PriceTick)
	SymbolAddMaxMarketOrderVolume(builder, t.MaxMarketOrderVolume)
	SymbolAddMinMarketOrderVolume(builder, t.MinMarketOrderVolume)
	SymbolAddMaxLimitOrderVolume(builder, t.MaxLimitOrderVolume)
	SymbolAddMinLimitOrderVolume(builder, t.MinLimitOrderVolume)
	SymbolAddInstrumentMultiple(builder, t.InstrumentMultiple)
	SymbolAddTradeAttribute(builder, t.TradeAttribute)
	SymbolAddSettleAttribute(builder, t.SettleAttribute)
	SymbolAddAdjustFactor(builder, t.AdjustFactor)
	SymbolAddStInfo(builder, t.StInfo)
	return SymbolEnd(builder)
}

func (rcv *Symbol) UnPackTo(t *SymbolT) {
	t.TradeDate = rcv.TradeDate()
	t.Type = rcv.Type()
	t.Status = rcv.Status()
	t.Symbol = string(rcv.Symbol())
	t.SecCnName = string(rcv.SecCnName())
	t.Market = string(rcv.Market())
	t.CodeId = string(rcv.CodeId())
	t.PreClose = rcv.PreClose()
	t.UpperLimit = rcv.UpperLimit()
	t.LowerLimit = rcv.LowerLimit()
	t.PriceTick = rcv.PriceTick()
	t.MaxMarketOrderVolume = rcv.MaxMarketOrderVolume()
	t.MinMarketOrderVolume = rcv.MinMarketOrderVolume()
	t.MaxLimitOrderVolume = rcv.MaxLimitOrderVolume()
	t.MinLimitOrderVolume = rcv.MinLimitOrderVolume()
	t.InstrumentMultiple = rcv.InstrumentMultiple()
	t.TradeAttribute = rcv.TradeAttribute()
	t.SettleAttribute = rcv.SettleAttribute()
	t.AdjustFactor = rcv.AdjustFactor()
	t.StInfo = rcv.StInfo()
}

func (rcv *Symbol) UnPack() *SymbolT {
	if rcv == nil {
		return nil
	}
	t := &SymbolT{}
	rcv.UnPackTo(t)
	return t
}

type Symbol struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbol(buf []byte, offset flatbuffers.UOffsetT) *Symbol {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Symbol{}
	x.Init(buf, n+offset)
	return x
}

func FinishSymbolBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSymbol(buf []byte, offset flatbuffers.UOffsetT) *Symbol {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Symbol{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSymbolBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Symbol) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Symbol) Table() flatbuffers.Table {
	return rcv._tab
}

///交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Symbol) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Symbol) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

///证券类型, 参考enum SymbolType中的值
func (rcv *Symbol) Type() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///证券类型, 参考enum SymbolType中的值
func (rcv *Symbol) MutateType(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

///状态
func (rcv *Symbol) Status() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///状态
func (rcv *Symbol) MutateStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
func (rcv *Symbol) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
///中文名称
func (rcv *Symbol) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///中文名称
///市场
///SZ,SH,HK,CF,BJ,O,N
func (rcv *Symbol) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///市场
///SZ,SH,HK,CF,BJ,O,N
///证券代码
///例如：000001,600000,00700
func (rcv *Symbol) CodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///证券代码
///例如：000001,600000,00700
///前收盘价
func (rcv *Symbol) PreClose() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///前收盘价
func (rcv *Symbol) MutatePreClose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

///涨停价
func (rcv *Symbol) UpperLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///涨停价
func (rcv *Symbol) MutateUpperLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

///跌停价
func (rcv *Symbol) LowerLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///跌停价
func (rcv *Symbol) MutateLowerLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

///最小价格单位
func (rcv *Symbol) PriceTick() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///最小价格单位
func (rcv *Symbol) MutatePriceTick(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

///市价委托最大单位
func (rcv *Symbol) MaxMarketOrderVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///市价委托最大单位
func (rcv *Symbol) MutateMaxMarketOrderVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

///市价委托最小单位
func (rcv *Symbol) MinMarketOrderVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///市价委托最小单位
func (rcv *Symbol) MutateMinMarketOrderVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

///限价委托最大单位
func (rcv *Symbol) MaxLimitOrderVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///限价委托最大单位
func (rcv *Symbol) MutateMaxLimitOrderVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

///限价委托最小单位
func (rcv *Symbol) MinLimitOrderVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///限价委托最小单位
func (rcv *Symbol) MutateMinLimitOrderVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

///合约乘数
func (rcv *Symbol) InstrumentMultiple() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///合约乘数
func (rcv *Symbol) MutateInstrumentMultiple(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

///交易属性, 参考enum TradeAttribute中的值
func (rcv *Symbol) TradeAttribute() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///交易属性, 参考enum TradeAttribute中的值
func (rcv *Symbol) MutateTradeAttribute(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

///结算属性
func (rcv *Symbol) SettleAttribute() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///结算属性
func (rcv *Symbol) MutateSettleAttribute(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

///今除权因子/昨除权因子
func (rcv *Symbol) AdjustFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///今除权因子/昨除权因子
func (rcv *Symbol) MutateAdjustFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

///ST信息
func (rcv *Symbol) StInfo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///ST信息
func (rcv *Symbol) MutateStInfo(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

func SymbolStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func SymbolAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(0, tradeDate, 0)
}
func SymbolAddType(builder *flatbuffers.Builder, type_ int64) {
	builder.PrependInt64Slot(1, type_, 0)
}
func SymbolAddStatus(builder *flatbuffers.Builder, status int32) {
	builder.PrependInt32Slot(2, status, 0)
}
func SymbolAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(symbol), 0)
}
func SymbolAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(secCnName), 0)
}
func SymbolAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(market), 0)
}
func SymbolAddCodeId(builder *flatbuffers.Builder, codeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(codeId), 0)
}
func SymbolAddPreClose(builder *flatbuffers.Builder, preClose float64) {
	builder.PrependFloat64Slot(7, preClose, 0.0)
}
func SymbolAddUpperLimit(builder *flatbuffers.Builder, upperLimit float64) {
	builder.PrependFloat64Slot(8, upperLimit, 0.0)
}
func SymbolAddLowerLimit(builder *flatbuffers.Builder, lowerLimit float64) {
	builder.PrependFloat64Slot(9, lowerLimit, 0.0)
}
func SymbolAddPriceTick(builder *flatbuffers.Builder, priceTick float64) {
	builder.PrependFloat64Slot(10, priceTick, 0.0)
}
func SymbolAddMaxMarketOrderVolume(builder *flatbuffers.Builder, maxMarketOrderVolume int64) {
	builder.PrependInt64Slot(11, maxMarketOrderVolume, 0)
}
func SymbolAddMinMarketOrderVolume(builder *flatbuffers.Builder, minMarketOrderVolume int64) {
	builder.PrependInt64Slot(12, minMarketOrderVolume, 0)
}
func SymbolAddMaxLimitOrderVolume(builder *flatbuffers.Builder, maxLimitOrderVolume int64) {
	builder.PrependInt64Slot(13, maxLimitOrderVolume, 0)
}
func SymbolAddMinLimitOrderVolume(builder *flatbuffers.Builder, minLimitOrderVolume int64) {
	builder.PrependInt64Slot(14, minLimitOrderVolume, 0)
}
func SymbolAddInstrumentMultiple(builder *flatbuffers.Builder, instrumentMultiple int64) {
	builder.PrependInt64Slot(15, instrumentMultiple, 0)
}
func SymbolAddTradeAttribute(builder *flatbuffers.Builder, tradeAttribute int64) {
	builder.PrependInt64Slot(16, tradeAttribute, 0)
}
func SymbolAddSettleAttribute(builder *flatbuffers.Builder, settleAttribute int64) {
	builder.PrependInt64Slot(17, settleAttribute, 0)
}
func SymbolAddAdjustFactor(builder *flatbuffers.Builder, adjustFactor float64) {
	builder.PrependFloat64Slot(18, adjustFactor, 0.0)
}
func SymbolAddStInfo(builder *flatbuffers.Builder, stInfo int32) {
	builder.PrependInt32Slot(19, stInfo, 0)
}
func SymbolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
