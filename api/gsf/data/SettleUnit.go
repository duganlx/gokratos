// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SettleUnitT struct {
	Category string `json:"category"`
	Name string `json:"name"`
	FullName string `json:"full_name"`
	Code string `json:"code"`
	Type string `json:"type"`
	Children []*SettleUnitT `json:"children"`
}

func (t *SettleUnitT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	categoryOffset := flatbuffers.UOffsetT(0)
	if t.Category != "" {
		categoryOffset = builder.CreateString(t.Category)
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	fullNameOffset := flatbuffers.UOffsetT(0)
	if t.FullName != "" {
		fullNameOffset = builder.CreateString(t.FullName)
	}
	codeOffset := flatbuffers.UOffsetT(0)
	if t.Code != "" {
		codeOffset = builder.CreateString(t.Code)
	}
	type_Offset := flatbuffers.UOffsetT(0)
	if t.Type != "" {
		type_Offset = builder.CreateString(t.Type)
	}
	childrenOffset := flatbuffers.UOffsetT(0)
	if t.Children != nil {
		childrenLength := len(t.Children)
		childrenOffsets := make([]flatbuffers.UOffsetT, childrenLength)
		for j := 0; j < childrenLength; j++ {
			childrenOffsets[j] = t.Children[j].Pack(builder)
		}
		SettleUnitStartChildrenVector(builder, childrenLength)
		for j := childrenLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(childrenOffsets[j])
		}
		childrenOffset = builder.EndVector(childrenLength)
	}
	SettleUnitStart(builder)
	SettleUnitAddCategory(builder, categoryOffset)
	SettleUnitAddName(builder, nameOffset)
	SettleUnitAddFullName(builder, fullNameOffset)
	SettleUnitAddCode(builder, codeOffset)
	SettleUnitAddType(builder, type_Offset)
	SettleUnitAddChildren(builder, childrenOffset)
	return SettleUnitEnd(builder)
}

func (rcv *SettleUnit) UnPackTo(t *SettleUnitT) {
	t.Category = string(rcv.Category())
	t.Name = string(rcv.Name())
	t.FullName = string(rcv.FullName())
	t.Code = string(rcv.Code())
	t.Type = string(rcv.Type())
	childrenLength := rcv.ChildrenLength()
	t.Children = make([]*SettleUnitT, childrenLength)
	for j := 0; j < childrenLength; j++ {
		x := SettleUnit{}
		rcv.Children(&x, j)
		t.Children[j] = x.UnPack()
	}
}

func (rcv *SettleUnit) UnPack() *SettleUnitT {
	if rcv == nil {
		return nil
	}
	t := &SettleUnitT{}
	rcv.UnPackTo(t)
	return t
}

type SettleUnit struct {
	_tab flatbuffers.Table
}

func GetRootAsSettleUnit(buf []byte, offset flatbuffers.UOffsetT) *SettleUnit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SettleUnit{}
	x.Init(buf, n+offset)
	return x
}

func FinishSettleUnitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSettleUnit(buf []byte, offset flatbuffers.UOffsetT) *SettleUnit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SettleUnit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSettleUnitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SettleUnit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SettleUnit) Table() flatbuffers.Table {
	return rcv._tab
}

/// 清算单元种类，如：product - 产品, account - 资金账户, unit - 资产单元
func (rcv *SettleUnit) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 清算单元种类，如：product - 产品, account - 资金账户, unit - 资产单元
/// 清算单元名称
func (rcv *SettleUnit) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 清算单元名称
/// 清算单元全称
func (rcv *SettleUnit) FullName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 清算单元全称
/// 清算单元代码
func (rcv *SettleUnit) Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 清算单元代码
/// 清算单元类型
func (rcv *SettleUnit) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 清算单元类型
/// 子清算单元
func (rcv *SettleUnit) Children(obj *SettleUnit, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SettleUnit) ChildrenLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// 子清算单元
func SettleUnitStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SettleUnitAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(category), 0)
}
func SettleUnitAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func SettleUnitAddFullName(builder *flatbuffers.Builder, fullName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fullName), 0)
}
func SettleUnitAddCode(builder *flatbuffers.Builder, code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(code), 0)
}
func SettleUnitAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func SettleUnitAddChildren(builder *flatbuffers.Builder, children flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(children), 0)
}
func SettleUnitStartChildrenVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SettleUnitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
