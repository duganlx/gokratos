// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AuMetricsT struct {
	AuCode string `json:"au_code"`
	PnlAmount float64 `json:"pnl_amount"`
	PnlRate float64 `json:"pnl_rate"`
	TurnoverRate float64 `json:"turnover_rate"`
	CancelRate float64 `json:"cancel_rate"`
	PosLongCount int32 `json:"pos_long_count"`
	PosLongValue float64 `json:"pos_long_value"`
	PosShortCount int32 `json:"pos_short_count"`
	PosShortValue float64 `json:"pos_short_value"`
	OrdBuyCount int32 `json:"ord_buy_count"`
	OrdBuyCancel int32 `json:"ord_buy_cancel"`
	OrdBuyReject int32 `json:"ord_buy_reject"`
	OrdBuyUnfilled int32 `json:"ord_buy_unfilled"`
	OrdSellCount int32 `json:"ord_sell_count"`
	OrdSellCancel int32 `json:"ord_sell_cancel"`
	OrdSellReject int32 `json:"ord_sell_reject"`
	OrdSellUnfilled int32 `json:"ord_sell_unfilled"`
	TrdBuyCount int32 `json:"trd_buy_count"`
	TrdBuyAmount float64 `json:"trd_buy_amount"`
	TrdSellCount int32 `json:"trd_sell_count"`
	TrdSellAmount float64 `json:"trd_sell_amount"`
}

func (t *AuMetricsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	AuMetricsStart(builder)
	AuMetricsAddAuCode(builder, auCodeOffset)
	AuMetricsAddPnlAmount(builder, t.PnlAmount)
	AuMetricsAddPnlRate(builder, t.PnlRate)
	AuMetricsAddTurnoverRate(builder, t.TurnoverRate)
	AuMetricsAddCancelRate(builder, t.CancelRate)
	AuMetricsAddPosLongCount(builder, t.PosLongCount)
	AuMetricsAddPosLongValue(builder, t.PosLongValue)
	AuMetricsAddPosShortCount(builder, t.PosShortCount)
	AuMetricsAddPosShortValue(builder, t.PosShortValue)
	AuMetricsAddOrdBuyCount(builder, t.OrdBuyCount)
	AuMetricsAddOrdBuyCancel(builder, t.OrdBuyCancel)
	AuMetricsAddOrdBuyReject(builder, t.OrdBuyReject)
	AuMetricsAddOrdBuyUnfilled(builder, t.OrdBuyUnfilled)
	AuMetricsAddOrdSellCount(builder, t.OrdSellCount)
	AuMetricsAddOrdSellCancel(builder, t.OrdSellCancel)
	AuMetricsAddOrdSellReject(builder, t.OrdSellReject)
	AuMetricsAddOrdSellUnfilled(builder, t.OrdSellUnfilled)
	AuMetricsAddTrdBuyCount(builder, t.TrdBuyCount)
	AuMetricsAddTrdBuyAmount(builder, t.TrdBuyAmount)
	AuMetricsAddTrdSellCount(builder, t.TrdSellCount)
	AuMetricsAddTrdSellAmount(builder, t.TrdSellAmount)
	return AuMetricsEnd(builder)
}

func (rcv *AuMetrics) UnPackTo(t *AuMetricsT) {
	t.AuCode = string(rcv.AuCode())
	t.PnlAmount = rcv.PnlAmount()
	t.PnlRate = rcv.PnlRate()
	t.TurnoverRate = rcv.TurnoverRate()
	t.CancelRate = rcv.CancelRate()
	t.PosLongCount = rcv.PosLongCount()
	t.PosLongValue = rcv.PosLongValue()
	t.PosShortCount = rcv.PosShortCount()
	t.PosShortValue = rcv.PosShortValue()
	t.OrdBuyCount = rcv.OrdBuyCount()
	t.OrdBuyCancel = rcv.OrdBuyCancel()
	t.OrdBuyReject = rcv.OrdBuyReject()
	t.OrdBuyUnfilled = rcv.OrdBuyUnfilled()
	t.OrdSellCount = rcv.OrdSellCount()
	t.OrdSellCancel = rcv.OrdSellCancel()
	t.OrdSellReject = rcv.OrdSellReject()
	t.OrdSellUnfilled = rcv.OrdSellUnfilled()
	t.TrdBuyCount = rcv.TrdBuyCount()
	t.TrdBuyAmount = rcv.TrdBuyAmount()
	t.TrdSellCount = rcv.TrdSellCount()
	t.TrdSellAmount = rcv.TrdSellAmount()
}

func (rcv *AuMetrics) UnPack() *AuMetricsT {
	if rcv == nil {
		return nil
	}
	t := &AuMetricsT{}
	rcv.UnPackTo(t)
	return t
}

type AuMetrics struct {
	_tab flatbuffers.Table
}

func GetRootAsAuMetrics(buf []byte, offset flatbuffers.UOffsetT) *AuMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AuMetrics{}
	x.Init(buf, n+offset)
	return x
}

func FinishAuMetricsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsAuMetrics(buf []byte, offset flatbuffers.UOffsetT) *AuMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AuMetrics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAuMetricsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *AuMetrics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AuMetrics) Table() flatbuffers.Table {
	return rcv._tab
}

/// 资产单元
func (rcv *AuMetrics) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元
/// 盈亏金额
func (rcv *AuMetrics) PnlAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 盈亏金额
func (rcv *AuMetrics) MutatePnlAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// 盈亏比例
func (rcv *AuMetrics) PnlRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 盈亏比例
func (rcv *AuMetrics) MutatePnlRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// 换手率
func (rcv *AuMetrics) TurnoverRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 换手率
func (rcv *AuMetrics) MutateTurnoverRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// 撤单率
func (rcv *AuMetrics) CancelRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 撤单率
func (rcv *AuMetrics) MutateCancelRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// 多头持仓数量
func (rcv *AuMetrics) PosLongCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 多头持仓数量
func (rcv *AuMetrics) MutatePosLongCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// 多头持仓市值
func (rcv *AuMetrics) PosLongValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 多头持仓市值
func (rcv *AuMetrics) MutatePosLongValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// 空头持仓数量
func (rcv *AuMetrics) PosShortCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 空头持仓数量
func (rcv *AuMetrics) MutatePosShortCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// 空头持仓市值
func (rcv *AuMetrics) PosShortValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 空头持仓市值
func (rcv *AuMetrics) MutatePosShortValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// 买入委托数量
func (rcv *AuMetrics) OrdBuyCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 买入委托数量
func (rcv *AuMetrics) MutateOrdBuyCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// 买入撤单数量
func (rcv *AuMetrics) OrdBuyCancel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 买入撤单数量
func (rcv *AuMetrics) MutateOrdBuyCancel(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// 买入拒单数量
func (rcv *AuMetrics) OrdBuyReject() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 买入拒单数量
func (rcv *AuMetrics) MutateOrdBuyReject(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// 买入未完成数量
func (rcv *AuMetrics) OrdBuyUnfilled() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 买入未完成数量
func (rcv *AuMetrics) MutateOrdBuyUnfilled(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// 卖出委托数量
func (rcv *AuMetrics) OrdSellCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖出委托数量
func (rcv *AuMetrics) MutateOrdSellCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// 卖出撤单数量
func (rcv *AuMetrics) OrdSellCancel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖出撤单数量
func (rcv *AuMetrics) MutateOrdSellCancel(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// 卖出拒单数量
func (rcv *AuMetrics) OrdSellReject() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖出拒单数量
func (rcv *AuMetrics) MutateOrdSellReject(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// 卖出未完成数量
func (rcv *AuMetrics) OrdSellUnfilled() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖出未完成数量
func (rcv *AuMetrics) MutateOrdSellUnfilled(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// 买入成交数量
func (rcv *AuMetrics) TrdBuyCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 买入成交数量
func (rcv *AuMetrics) MutateTrdBuyCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// 买入成交金额
func (rcv *AuMetrics) TrdBuyAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 买入成交金额
func (rcv *AuMetrics) MutateTrdBuyAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// 卖出成交数量
func (rcv *AuMetrics) TrdSellCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖出成交数量
func (rcv *AuMetrics) MutateTrdSellCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// 卖出成交金额
func (rcv *AuMetrics) TrdSellAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 卖出成交金额
func (rcv *AuMetrics) MutateTrdSellAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

func AuMetricsStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func AuMetricsAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auCode), 0)
}
func AuMetricsAddPnlAmount(builder *flatbuffers.Builder, pnlAmount float64) {
	builder.PrependFloat64Slot(1, pnlAmount, 0.0)
}
func AuMetricsAddPnlRate(builder *flatbuffers.Builder, pnlRate float64) {
	builder.PrependFloat64Slot(2, pnlRate, 0.0)
}
func AuMetricsAddTurnoverRate(builder *flatbuffers.Builder, turnoverRate float64) {
	builder.PrependFloat64Slot(3, turnoverRate, 0.0)
}
func AuMetricsAddCancelRate(builder *flatbuffers.Builder, cancelRate float64) {
	builder.PrependFloat64Slot(4, cancelRate, 0.0)
}
func AuMetricsAddPosLongCount(builder *flatbuffers.Builder, posLongCount int32) {
	builder.PrependInt32Slot(5, posLongCount, 0)
}
func AuMetricsAddPosLongValue(builder *flatbuffers.Builder, posLongValue float64) {
	builder.PrependFloat64Slot(6, posLongValue, 0.0)
}
func AuMetricsAddPosShortCount(builder *flatbuffers.Builder, posShortCount int32) {
	builder.PrependInt32Slot(7, posShortCount, 0)
}
func AuMetricsAddPosShortValue(builder *flatbuffers.Builder, posShortValue float64) {
	builder.PrependFloat64Slot(8, posShortValue, 0.0)
}
func AuMetricsAddOrdBuyCount(builder *flatbuffers.Builder, ordBuyCount int32) {
	builder.PrependInt32Slot(9, ordBuyCount, 0)
}
func AuMetricsAddOrdBuyCancel(builder *flatbuffers.Builder, ordBuyCancel int32) {
	builder.PrependInt32Slot(10, ordBuyCancel, 0)
}
func AuMetricsAddOrdBuyReject(builder *flatbuffers.Builder, ordBuyReject int32) {
	builder.PrependInt32Slot(11, ordBuyReject, 0)
}
func AuMetricsAddOrdBuyUnfilled(builder *flatbuffers.Builder, ordBuyUnfilled int32) {
	builder.PrependInt32Slot(12, ordBuyUnfilled, 0)
}
func AuMetricsAddOrdSellCount(builder *flatbuffers.Builder, ordSellCount int32) {
	builder.PrependInt32Slot(13, ordSellCount, 0)
}
func AuMetricsAddOrdSellCancel(builder *flatbuffers.Builder, ordSellCancel int32) {
	builder.PrependInt32Slot(14, ordSellCancel, 0)
}
func AuMetricsAddOrdSellReject(builder *flatbuffers.Builder, ordSellReject int32) {
	builder.PrependInt32Slot(15, ordSellReject, 0)
}
func AuMetricsAddOrdSellUnfilled(builder *flatbuffers.Builder, ordSellUnfilled int32) {
	builder.PrependInt32Slot(16, ordSellUnfilled, 0)
}
func AuMetricsAddTrdBuyCount(builder *flatbuffers.Builder, trdBuyCount int32) {
	builder.PrependInt32Slot(17, trdBuyCount, 0)
}
func AuMetricsAddTrdBuyAmount(builder *flatbuffers.Builder, trdBuyAmount float64) {
	builder.PrependFloat64Slot(18, trdBuyAmount, 0.0)
}
func AuMetricsAddTrdSellCount(builder *flatbuffers.Builder, trdSellCount int32) {
	builder.PrependInt32Slot(19, trdSellCount, 0)
}
func AuMetricsAddTrdSellAmount(builder *flatbuffers.Builder, trdSellAmount float64) {
	builder.PrependFloat64Slot(20, trdSellAmount, 0.0)
}
func AuMetricsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
