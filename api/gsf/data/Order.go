// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OrderT struct {
	AuCode string `json:"au_code"`
	LocalId int64 `json:"local_id"`
	OrderId string `json:"order_id"`
	OrderOrigId string `json:"order_orig_id"`
	Symbol string `json:"symbol"`
	Type OrderType `json:"type"`
	Side OrderSide `json:"side"`
	Offset OrderOffset `json:"offset"`
	Price float64 `json:"price"`
	Volume int64 `json:"volume"`
	TradedPrice float64 `json:"traded_price"`
	TradedVolume int64 `json:"traded_volume"`
	CreateTime int64 `json:"create_time"`
	QueuedTime int64 `json:"queued_time"`
	UpdateTime int64 `json:"update_time"`
	TradeDate int64 `json:"trade_date"`
	OperatorId string `json:"operator_id"`
	Status OrderStatus `json:"status"`
	ErrorCode OrderErrorType `json:"error_code"`
	Remark string `json:"remark"`
	EamCode int64 `json:"eam_code"`
	SecCnName string `json:"sec_cn_name"`
	Commission float64 `json:"commission"`
	CommissionAsset string `json:"commission_asset"`
}

func (t *OrderT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	orderIdOffset := flatbuffers.UOffsetT(0)
	if t.OrderId != "" {
		orderIdOffset = builder.CreateString(t.OrderId)
	}
	orderOrigIdOffset := flatbuffers.UOffsetT(0)
	if t.OrderOrigId != "" {
		orderOrigIdOffset = builder.CreateString(t.OrderOrigId)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	operatorIdOffset := flatbuffers.UOffsetT(0)
	if t.OperatorId != "" {
		operatorIdOffset = builder.CreateString(t.OperatorId)
	}
	remarkOffset := flatbuffers.UOffsetT(0)
	if t.Remark != "" {
		remarkOffset = builder.CreateString(t.Remark)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	commissionAssetOffset := flatbuffers.UOffsetT(0)
	if t.CommissionAsset != "" {
		commissionAssetOffset = builder.CreateString(t.CommissionAsset)
	}
	OrderStart(builder)
	OrderAddAuCode(builder, auCodeOffset)
	OrderAddLocalId(builder, t.LocalId)
	OrderAddOrderId(builder, orderIdOffset)
	OrderAddOrderOrigId(builder, orderOrigIdOffset)
	OrderAddSymbol(builder, symbolOffset)
	OrderAddType(builder, t.Type)
	OrderAddSide(builder, t.Side)
	OrderAddOffset(builder, t.Offset)
	OrderAddPrice(builder, t.Price)
	OrderAddVolume(builder, t.Volume)
	OrderAddTradedPrice(builder, t.TradedPrice)
	OrderAddTradedVolume(builder, t.TradedVolume)
	OrderAddCreateTime(builder, t.CreateTime)
	OrderAddQueuedTime(builder, t.QueuedTime)
	OrderAddUpdateTime(builder, t.UpdateTime)
	OrderAddTradeDate(builder, t.TradeDate)
	OrderAddOperatorId(builder, operatorIdOffset)
	OrderAddStatus(builder, t.Status)
	OrderAddErrorCode(builder, t.ErrorCode)
	OrderAddRemark(builder, remarkOffset)
	OrderAddEamCode(builder, t.EamCode)
	OrderAddSecCnName(builder, secCnNameOffset)
	OrderAddCommission(builder, t.Commission)
	OrderAddCommissionAsset(builder, commissionAssetOffset)
	return OrderEnd(builder)
}

func (rcv *Order) UnPackTo(t *OrderT) {
	t.AuCode = string(rcv.AuCode())
	t.LocalId = rcv.LocalId()
	t.OrderId = string(rcv.OrderId())
	t.OrderOrigId = string(rcv.OrderOrigId())
	t.Symbol = string(rcv.Symbol())
	t.Type = rcv.Type()
	t.Side = rcv.Side()
	t.Offset = rcv.Offset()
	t.Price = rcv.Price()
	t.Volume = rcv.Volume()
	t.TradedPrice = rcv.TradedPrice()
	t.TradedVolume = rcv.TradedVolume()
	t.CreateTime = rcv.CreateTime()
	t.QueuedTime = rcv.QueuedTime()
	t.UpdateTime = rcv.UpdateTime()
	t.TradeDate = rcv.TradeDate()
	t.OperatorId = string(rcv.OperatorId())
	t.Status = rcv.Status()
	t.ErrorCode = rcv.ErrorCode()
	t.Remark = string(rcv.Remark())
	t.EamCode = rcv.EamCode()
	t.SecCnName = string(rcv.SecCnName())
	t.Commission = rcv.Commission()
	t.CommissionAsset = string(rcv.CommissionAsset())
}

func (rcv *Order) UnPack() *OrderT {
	if rcv == nil {
		return nil
	}
	t := &OrderT{}
	rcv.UnPackTo(t)
	return t
}

type Order struct {
	_tab flatbuffers.Table
}

func GetRootAsOrder(buf []byte, offset flatbuffers.UOffsetT) *Order {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Order{}
	x.Init(buf, n+offset)
	return x
}

func FinishOrderBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOrder(buf []byte, offset flatbuffers.UOffsetT) *Order {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Order{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOrderBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Order) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Order) Table() flatbuffers.Table {
	return rcv._tab
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
func (rcv *Order) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
/// 本地委托号，在系统中的唯一订单标识
func (rcv *Order) LocalId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 本地委托号，在系统中的唯一订单标识
func (rcv *Order) MutateLocalId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

/// 委托序号
func (rcv *Order) OrderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 委托序号
///内部委托信息，例如撤单的原始委托号
func (rcv *Order) OrderOrigId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///内部委托信息，例如撤单的原始委托号
/// 品种代码
func (rcv *Order) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 品种代码
/// 委托类型
func (rcv *Order) Type() OrderType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return OrderType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

/// 委托类型
func (rcv *Order) MutateType(n OrderType) bool {
	return rcv._tab.MutateUint16Slot(14, uint16(n))
}

/// 买卖方向
func (rcv *Order) Side() OrderSide {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return OrderSide(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 买卖方向
func (rcv *Order) MutateSide(n OrderSide) bool {
	return rcv._tab.MutateInt16Slot(16, int16(n))
}

/// 开平标志, 默认为DEFAULT
func (rcv *Order) Offset() OrderOffset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return OrderOffset(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 开平标志, 默认为DEFAULT
func (rcv *Order) MutateOffset(n OrderOffset) bool {
	return rcv._tab.MutateInt16Slot(18, int16(n))
}

/// 委托价格
func (rcv *Order) Price() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 委托价格
func (rcv *Order) MutatePrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// 委托数量
func (rcv *Order) Volume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 委托数量
func (rcv *Order) MutateVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

/// 成交均价
func (rcv *Order) TradedPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 成交均价
func (rcv *Order) MutateTradedPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 成交数量
func (rcv *Order) TradedVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 成交数量
func (rcv *Order) MutateTradedVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

/// 委托时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 委托时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

/// 已报时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) QueuedTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 已报时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) MutateQueuedTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Order) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

/// 操作员号
func (rcv *Order) OperatorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 操作员号
/// 委托状态
func (rcv *Order) Status() OrderStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return OrderStatus(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

/// 委托状态
func (rcv *Order) MutateStatus(n OrderStatus) bool {
	return rcv._tab.MutateUint16Slot(38, uint16(n))
}

func (rcv *Order) ErrorCode() OrderErrorType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return OrderErrorType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Order) MutateErrorCode(n OrderErrorType) bool {
	return rcv._tab.MutateUint16Slot(40, uint16(n))
}

/// 备注
func (rcv *Order) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 备注
///EAM内部代码
func (rcv *Order) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *Order) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(44, n)
}

///中文名称
func (rcv *Order) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///中文名称
///佣金费用
func (rcv *Order) Commission() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///佣金费用
func (rcv *Order) MutateCommission(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

///佣金支付资产/币种，默认CNY，用于支持多币种佣金(例如：BTC, ETH, USDT等)
func (rcv *Order) CommissionAsset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///佣金支付资产/币种，默认CNY，用于支持多币种佣金(例如：BTC, ETH, USDT等)
func OrderStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func OrderAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auCode), 0)
}
func OrderAddLocalId(builder *flatbuffers.Builder, localId int64) {
	builder.PrependInt64Slot(1, localId, 0)
}
func OrderAddOrderId(builder *flatbuffers.Builder, orderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(orderId), 0)
}
func OrderAddOrderOrigId(builder *flatbuffers.Builder, orderOrigId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(orderOrigId), 0)
}
func OrderAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(symbol), 0)
}
func OrderAddType(builder *flatbuffers.Builder, type_ OrderType) {
	builder.PrependUint16Slot(5, uint16(type_), 0)
}
func OrderAddSide(builder *flatbuffers.Builder, side OrderSide) {
	builder.PrependInt16Slot(6, int16(side), 0)
}
func OrderAddOffset(builder *flatbuffers.Builder, offset OrderOffset) {
	builder.PrependInt16Slot(7, int16(offset), 0)
}
func OrderAddPrice(builder *flatbuffers.Builder, price float64) {
	builder.PrependFloat64Slot(8, price, 0.0)
}
func OrderAddVolume(builder *flatbuffers.Builder, volume int64) {
	builder.PrependInt64Slot(9, volume, 0)
}
func OrderAddTradedPrice(builder *flatbuffers.Builder, tradedPrice float64) {
	builder.PrependFloat64Slot(10, tradedPrice, 0.0)
}
func OrderAddTradedVolume(builder *flatbuffers.Builder, tradedVolume int64) {
	builder.PrependInt64Slot(11, tradedVolume, 0)
}
func OrderAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(12, createTime, 0)
}
func OrderAddQueuedTime(builder *flatbuffers.Builder, queuedTime int64) {
	builder.PrependInt64Slot(13, queuedTime, 0)
}
func OrderAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(14, updateTime, 0)
}
func OrderAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(15, tradeDate, 0)
}
func OrderAddOperatorId(builder *flatbuffers.Builder, operatorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(operatorId), 0)
}
func OrderAddStatus(builder *flatbuffers.Builder, status OrderStatus) {
	builder.PrependUint16Slot(17, uint16(status), 0)
}
func OrderAddErrorCode(builder *flatbuffers.Builder, errorCode OrderErrorType) {
	builder.PrependUint16Slot(18, uint16(errorCode), 0)
}
func OrderAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(remark), 0)
}
func OrderAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(20, eamCode, 0)
}
func OrderAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(secCnName), 0)
}
func OrderAddCommission(builder *flatbuffers.Builder, commission float64) {
	builder.PrependFloat64Slot(22, commission, 0.0)
}
func OrderAddCommissionAsset(builder *flatbuffers.Builder, commissionAsset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(commissionAsset), 0)
}
func OrderEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
