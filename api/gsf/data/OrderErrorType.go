// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import "strconv"

type OrderErrorType uint16

const (
	/// error when status greater than 20
	OrderErrorTypeOS_ERROR_NONE                  OrderErrorType = 0
	/// 20 错单
	OrderErrorTypeOS_ERROR_GENERAL               OrderErrorType = 20
	/// 21 流控
	OrderErrorTypeOS_ERROR_FLOWCONTROL           OrderErrorType = 21
	/// 22 逻辑单作废
	OrderErrorTypeOS_ERROR_ABANDON               OrderErrorType = 22
	/// 23 否决
	OrderErrorTypeOS_ERROR_DENIED                OrderErrorType = 23
	/// 24 自成交
	OrderErrorTypeOS_ERROR_SELFMATCH             OrderErrorType = 24
	/// 25 资产单元不存在
	OrderErrorTypeOS_ERROR_ASSETUNIT             OrderErrorType = 25
	/// 26 风控
	OrderErrorTypeOS_ERROR_FK                    OrderErrorType = 26
	/// only available in back test mode
	/// 30 已收盘
	OrderErrorTypeOS_ERROR_MARKET_CLOSE          OrderErrorType = 30
	/// 31 下单股数错误(小于等于0)
	OrderErrorTypeOS_ERROR_ERR_VOL_TOO_LITTLE    OrderErrorType = 31
	/// 32 下单股数错误(太大)
	OrderErrorTypeOS_ERROR_ERR_VOL_TOO_MANY      OrderErrorType = 32
	/// 33 下单股数错误(买单不是整手)
	OrderErrorTypeOS_ERROR_ERR_VOL_PART_LOT      OrderErrorType = 33
	/// 34 下单股数错误(买单不是整手)
	OrderErrorTypeOS_ERROR_ERR_VOL_KCB_PART_LOT  OrderErrorType = 34
	/// 35 下单价格错误(小于等于0)
	OrderErrorTypeOS_ERROR_ERR_PRICE             OrderErrorType = 35
	/// 36 下单价格超过涨停价
	OrderErrorTypeOS_ERROR_ERR_HIGH_LIMIT        OrderErrorType = 36
	/// 37 下单价格超过跌停价
	OrderErrorTypeOS_ERROR_ERR_LOW_LIMIT         OrderErrorType = 37
	/// 38 停牌
	OrderErrorTypeOS_ERROR_STOCK_SUSPEND         OrderErrorType = 38
	/// 39 可用资金不足
	OrderErrorTypeOS_ERROR_INSUFFICIENT_FUND     OrderErrorType = 39
	/// 40 没有可卖持仓
	OrderErrorTypeOS_ERROR_NO_POSITION           OrderErrorType = 40
	/// 41 可卖持仓不足
	OrderErrorTypeOS_ERROR_INSUFFICIENT_POSITION OrderErrorType = 41
)

var EnumNamesOrderErrorType = map[OrderErrorType]string{
	OrderErrorTypeOS_ERROR_NONE:                  "OS_ERROR_NONE",
	OrderErrorTypeOS_ERROR_GENERAL:               "OS_ERROR_GENERAL",
	OrderErrorTypeOS_ERROR_FLOWCONTROL:           "OS_ERROR_FLOWCONTROL",
	OrderErrorTypeOS_ERROR_ABANDON:               "OS_ERROR_ABANDON",
	OrderErrorTypeOS_ERROR_DENIED:                "OS_ERROR_DENIED",
	OrderErrorTypeOS_ERROR_SELFMATCH:             "OS_ERROR_SELFMATCH",
	OrderErrorTypeOS_ERROR_ASSETUNIT:             "OS_ERROR_ASSETUNIT",
	OrderErrorTypeOS_ERROR_FK:                    "OS_ERROR_FK",
	OrderErrorTypeOS_ERROR_MARKET_CLOSE:          "OS_ERROR_MARKET_CLOSE",
	OrderErrorTypeOS_ERROR_ERR_VOL_TOO_LITTLE:    "OS_ERROR_ERR_VOL_TOO_LITTLE",
	OrderErrorTypeOS_ERROR_ERR_VOL_TOO_MANY:      "OS_ERROR_ERR_VOL_TOO_MANY",
	OrderErrorTypeOS_ERROR_ERR_VOL_PART_LOT:      "OS_ERROR_ERR_VOL_PART_LOT",
	OrderErrorTypeOS_ERROR_ERR_VOL_KCB_PART_LOT:  "OS_ERROR_ERR_VOL_KCB_PART_LOT",
	OrderErrorTypeOS_ERROR_ERR_PRICE:             "OS_ERROR_ERR_PRICE",
	OrderErrorTypeOS_ERROR_ERR_HIGH_LIMIT:        "OS_ERROR_ERR_HIGH_LIMIT",
	OrderErrorTypeOS_ERROR_ERR_LOW_LIMIT:         "OS_ERROR_ERR_LOW_LIMIT",
	OrderErrorTypeOS_ERROR_STOCK_SUSPEND:         "OS_ERROR_STOCK_SUSPEND",
	OrderErrorTypeOS_ERROR_INSUFFICIENT_FUND:     "OS_ERROR_INSUFFICIENT_FUND",
	OrderErrorTypeOS_ERROR_NO_POSITION:           "OS_ERROR_NO_POSITION",
	OrderErrorTypeOS_ERROR_INSUFFICIENT_POSITION: "OS_ERROR_INSUFFICIENT_POSITION",
}

var EnumValuesOrderErrorType = map[string]OrderErrorType{
	"OS_ERROR_NONE":                  OrderErrorTypeOS_ERROR_NONE,
	"OS_ERROR_GENERAL":               OrderErrorTypeOS_ERROR_GENERAL,
	"OS_ERROR_FLOWCONTROL":           OrderErrorTypeOS_ERROR_FLOWCONTROL,
	"OS_ERROR_ABANDON":               OrderErrorTypeOS_ERROR_ABANDON,
	"OS_ERROR_DENIED":                OrderErrorTypeOS_ERROR_DENIED,
	"OS_ERROR_SELFMATCH":             OrderErrorTypeOS_ERROR_SELFMATCH,
	"OS_ERROR_ASSETUNIT":             OrderErrorTypeOS_ERROR_ASSETUNIT,
	"OS_ERROR_FK":                    OrderErrorTypeOS_ERROR_FK,
	"OS_ERROR_MARKET_CLOSE":          OrderErrorTypeOS_ERROR_MARKET_CLOSE,
	"OS_ERROR_ERR_VOL_TOO_LITTLE":    OrderErrorTypeOS_ERROR_ERR_VOL_TOO_LITTLE,
	"OS_ERROR_ERR_VOL_TOO_MANY":      OrderErrorTypeOS_ERROR_ERR_VOL_TOO_MANY,
	"OS_ERROR_ERR_VOL_PART_LOT":      OrderErrorTypeOS_ERROR_ERR_VOL_PART_LOT,
	"OS_ERROR_ERR_VOL_KCB_PART_LOT":  OrderErrorTypeOS_ERROR_ERR_VOL_KCB_PART_LOT,
	"OS_ERROR_ERR_PRICE":             OrderErrorTypeOS_ERROR_ERR_PRICE,
	"OS_ERROR_ERR_HIGH_LIMIT":        OrderErrorTypeOS_ERROR_ERR_HIGH_LIMIT,
	"OS_ERROR_ERR_LOW_LIMIT":         OrderErrorTypeOS_ERROR_ERR_LOW_LIMIT,
	"OS_ERROR_STOCK_SUSPEND":         OrderErrorTypeOS_ERROR_STOCK_SUSPEND,
	"OS_ERROR_INSUFFICIENT_FUND":     OrderErrorTypeOS_ERROR_INSUFFICIENT_FUND,
	"OS_ERROR_NO_POSITION":           OrderErrorTypeOS_ERROR_NO_POSITION,
	"OS_ERROR_INSUFFICIENT_POSITION": OrderErrorTypeOS_ERROR_INSUFFICIENT_POSITION,
}

func (v OrderErrorType) String() string {
	if s, ok := EnumNamesOrderErrorType[v]; ok {
		return s
	}
	return "OrderErrorType(" + strconv.FormatInt(int64(v), 10) + ")"
}
