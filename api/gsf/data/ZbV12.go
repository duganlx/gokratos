// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ZbV12T struct {
	Rq int32 `json:"rq"`
	StockCode string `json:"stock_code"`
	Time int32 `json:"time"`
	B1 float64 `json:"b1"`
	B2 float64 `json:"b2"`
	B3 float64 `json:"b3"`
	B4 float64 `json:"b4"`
	B5 float64 `json:"b5"`
	B6 float64 `json:"b6"`
	B7 float64 `json:"b7"`
	B8 float64 `json:"b8"`
	B9 float64 `json:"b9"`
	B10 float64 `json:"b10"`
	B11 float64 `json:"b11"`
	S1 float64 `json:"s1"`
	S2 float64 `json:"s2"`
	S3 float64 `json:"s3"`
	S4 float64 `json:"s4"`
	S5 float64 `json:"s5"`
	S6 float64 `json:"s6"`
	S7 float64 `json:"s7"`
	S8 float64 `json:"s8"`
	S9 float64 `json:"s9"`
	S10 float64 `json:"s10"`
	S11 float64 `json:"s11"`
}

func (t *ZbV12T) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	stockCodeOffset := flatbuffers.UOffsetT(0)
	if t.StockCode != "" {
		stockCodeOffset = builder.CreateString(t.StockCode)
	}
	ZbV12Start(builder)
	ZbV12AddRq(builder, t.Rq)
	ZbV12AddStockCode(builder, stockCodeOffset)
	ZbV12AddTime(builder, t.Time)
	ZbV12AddB1(builder, t.B1)
	ZbV12AddB2(builder, t.B2)
	ZbV12AddB3(builder, t.B3)
	ZbV12AddB4(builder, t.B4)
	ZbV12AddB5(builder, t.B5)
	ZbV12AddB6(builder, t.B6)
	ZbV12AddB7(builder, t.B7)
	ZbV12AddB8(builder, t.B8)
	ZbV12AddB9(builder, t.B9)
	ZbV12AddB10(builder, t.B10)
	ZbV12AddB11(builder, t.B11)
	ZbV12AddS1(builder, t.S1)
	ZbV12AddS2(builder, t.S2)
	ZbV12AddS3(builder, t.S3)
	ZbV12AddS4(builder, t.S4)
	ZbV12AddS5(builder, t.S5)
	ZbV12AddS6(builder, t.S6)
	ZbV12AddS7(builder, t.S7)
	ZbV12AddS8(builder, t.S8)
	ZbV12AddS9(builder, t.S9)
	ZbV12AddS10(builder, t.S10)
	ZbV12AddS11(builder, t.S11)
	return ZbV12End(builder)
}

func (rcv *ZbV12) UnPackTo(t *ZbV12T) {
	t.Rq = rcv.Rq()
	t.StockCode = string(rcv.StockCode())
	t.Time = rcv.Time()
	t.B1 = rcv.B1()
	t.B2 = rcv.B2()
	t.B3 = rcv.B3()
	t.B4 = rcv.B4()
	t.B5 = rcv.B5()
	t.B6 = rcv.B6()
	t.B7 = rcv.B7()
	t.B8 = rcv.B8()
	t.B9 = rcv.B9()
	t.B10 = rcv.B10()
	t.B11 = rcv.B11()
	t.S1 = rcv.S1()
	t.S2 = rcv.S2()
	t.S3 = rcv.S3()
	t.S4 = rcv.S4()
	t.S5 = rcv.S5()
	t.S6 = rcv.S6()
	t.S7 = rcv.S7()
	t.S8 = rcv.S8()
	t.S9 = rcv.S9()
	t.S10 = rcv.S10()
	t.S11 = rcv.S11()
}

func (rcv *ZbV12) UnPack() *ZbV12T {
	if rcv == nil {
		return nil
	}
	t := &ZbV12T{}
	rcv.UnPackTo(t)
	return t
}

type ZbV12 struct {
	_tab flatbuffers.Table
}

func GetRootAsZbV12(buf []byte, offset flatbuffers.UOffsetT) *ZbV12 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ZbV12{}
	x.Init(buf, n+offset)
	return x
}

func FinishZbV12Buffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsZbV12(buf []byte, offset flatbuffers.UOffsetT) *ZbV12 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ZbV12{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedZbV12Buffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ZbV12) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ZbV12) Table() flatbuffers.Table {
	return rcv._tab
}

///日期，格式为YYYYMMDD
func (rcv *ZbV12) Rq() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///日期，格式为YYYYMMDD
func (rcv *ZbV12) MutateRq(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

///股票代码(CodeId), 不包含市场后缀
func (rcv *ZbV12) StockCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///股票代码(CodeId), 不包含市场后缀
///时间，格式为HHMMSSFFF
func (rcv *ZbV12) Time() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

///时间，格式为HHMMSSFFF
func (rcv *ZbV12) MutateTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *ZbV12) B1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *ZbV12) B2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *ZbV12) B3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *ZbV12) B4() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB4(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func (rcv *ZbV12) B5() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB5(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

func (rcv *ZbV12) B6() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB6(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

func (rcv *ZbV12) B7() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB7(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

func (rcv *ZbV12) B8() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB8(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

func (rcv *ZbV12) B9() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB9(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

func (rcv *ZbV12) B10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

func (rcv *ZbV12) B11() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateB11(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

func (rcv *ZbV12) S1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

func (rcv *ZbV12) S2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

func (rcv *ZbV12) S3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

func (rcv *ZbV12) S4() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS4(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

func (rcv *ZbV12) S5() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS5(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

func (rcv *ZbV12) S6() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS6(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

func (rcv *ZbV12) S7() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS7(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

func (rcv *ZbV12) S8() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS8(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

func (rcv *ZbV12) S9() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS9(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

func (rcv *ZbV12) S10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

func (rcv *ZbV12) S11() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *ZbV12) MutateS11(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

func ZbV12Start(builder *flatbuffers.Builder) {
	builder.StartObject(25)
}
func ZbV12AddRq(builder *flatbuffers.Builder, rq int32) {
	builder.PrependInt32Slot(0, rq, 0)
}
func ZbV12AddStockCode(builder *flatbuffers.Builder, stockCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(stockCode), 0)
}
func ZbV12AddTime(builder *flatbuffers.Builder, time int32) {
	builder.PrependInt32Slot(2, time, 0)
}
func ZbV12AddB1(builder *flatbuffers.Builder, b1 float64) {
	builder.PrependFloat64Slot(3, b1, 0.0)
}
func ZbV12AddB2(builder *flatbuffers.Builder, b2 float64) {
	builder.PrependFloat64Slot(4, b2, 0.0)
}
func ZbV12AddB3(builder *flatbuffers.Builder, b3 float64) {
	builder.PrependFloat64Slot(5, b3, 0.0)
}
func ZbV12AddB4(builder *flatbuffers.Builder, b4 float64) {
	builder.PrependFloat64Slot(6, b4, 0.0)
}
func ZbV12AddB5(builder *flatbuffers.Builder, b5 float64) {
	builder.PrependFloat64Slot(7, b5, 0.0)
}
func ZbV12AddB6(builder *flatbuffers.Builder, b6 float64) {
	builder.PrependFloat64Slot(8, b6, 0.0)
}
func ZbV12AddB7(builder *flatbuffers.Builder, b7 float64) {
	builder.PrependFloat64Slot(9, b7, 0.0)
}
func ZbV12AddB8(builder *flatbuffers.Builder, b8 float64) {
	builder.PrependFloat64Slot(10, b8, 0.0)
}
func ZbV12AddB9(builder *flatbuffers.Builder, b9 float64) {
	builder.PrependFloat64Slot(11, b9, 0.0)
}
func ZbV12AddB10(builder *flatbuffers.Builder, b10 float64) {
	builder.PrependFloat64Slot(12, b10, 0.0)
}
func ZbV12AddB11(builder *flatbuffers.Builder, b11 float64) {
	builder.PrependFloat64Slot(13, b11, 0.0)
}
func ZbV12AddS1(builder *flatbuffers.Builder, s1 float64) {
	builder.PrependFloat64Slot(14, s1, 0.0)
}
func ZbV12AddS2(builder *flatbuffers.Builder, s2 float64) {
	builder.PrependFloat64Slot(15, s2, 0.0)
}
func ZbV12AddS3(builder *flatbuffers.Builder, s3 float64) {
	builder.PrependFloat64Slot(16, s3, 0.0)
}
func ZbV12AddS4(builder *flatbuffers.Builder, s4 float64) {
	builder.PrependFloat64Slot(17, s4, 0.0)
}
func ZbV12AddS5(builder *flatbuffers.Builder, s5 float64) {
	builder.PrependFloat64Slot(18, s5, 0.0)
}
func ZbV12AddS6(builder *flatbuffers.Builder, s6 float64) {
	builder.PrependFloat64Slot(19, s6, 0.0)
}
func ZbV12AddS7(builder *flatbuffers.Builder, s7 float64) {
	builder.PrependFloat64Slot(20, s7, 0.0)
}
func ZbV12AddS8(builder *flatbuffers.Builder, s8 float64) {
	builder.PrependFloat64Slot(21, s8, 0.0)
}
func ZbV12AddS9(builder *flatbuffers.Builder, s9 float64) {
	builder.PrependFloat64Slot(22, s9, 0.0)
}
func ZbV12AddS10(builder *flatbuffers.Builder, s10 float64) {
	builder.PrependFloat64Slot(23, s10, 0.0)
}
func ZbV12AddS11(builder *flatbuffers.Builder, s11 float64) {
	builder.PrependFloat64Slot(24, s11, 0.0)
}
func ZbV12End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
