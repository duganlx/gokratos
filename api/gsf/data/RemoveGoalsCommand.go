// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RemoveGoalsCommandT struct {
	Time int64 `json:"time"`
	AuCode string `json:"au_code"`
	Symbols []string `json:"symbols"`
}

func (t *RemoveGoalsCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolsOffset := flatbuffers.UOffsetT(0)
	if t.Symbols != nil {
		symbolsLength := len(t.Symbols)
		symbolsOffsets := make([]flatbuffers.UOffsetT, symbolsLength)
		for j := 0; j < symbolsLength; j++ {
			symbolsOffsets[j] = builder.CreateString(t.Symbols[j])
		}
		RemoveGoalsCommandStartSymbolsVector(builder, symbolsLength)
		for j := symbolsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(symbolsOffsets[j])
		}
		symbolsOffset = builder.EndVector(symbolsLength)
	}
	RemoveGoalsCommandStart(builder)
	RemoveGoalsCommandAddTime(builder, t.Time)
	RemoveGoalsCommandAddAuCode(builder, auCodeOffset)
	RemoveGoalsCommandAddSymbols(builder, symbolsOffset)
	return RemoveGoalsCommandEnd(builder)
}

func (rcv *RemoveGoalsCommand) UnPackTo(t *RemoveGoalsCommandT) {
	t.Time = rcv.Time()
	t.AuCode = string(rcv.AuCode())
	symbolsLength := rcv.SymbolsLength()
	t.Symbols = make([]string, symbolsLength)
	for j := 0; j < symbolsLength; j++ {
		t.Symbols[j] = string(rcv.Symbols(j))
	}
}

func (rcv *RemoveGoalsCommand) UnPack() *RemoveGoalsCommandT {
	if rcv == nil {
		return nil
	}
	t := &RemoveGoalsCommandT{}
	rcv.UnPackTo(t)
	return t
}

type RemoveGoalsCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsRemoveGoalsCommand(buf []byte, offset flatbuffers.UOffsetT) *RemoveGoalsCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RemoveGoalsCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishRemoveGoalsCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRemoveGoalsCommand(buf []byte, offset flatbuffers.UOffsetT) *RemoveGoalsCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RemoveGoalsCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRemoveGoalsCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RemoveGoalsCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RemoveGoalsCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RemoveGoalsCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RemoveGoalsCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RemoveGoalsCommand) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RemoveGoalsCommand) Symbols(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RemoveGoalsCommand) SymbolsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RemoveGoalsCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RemoveGoalsCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func RemoveGoalsCommandAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(auCode), 0)
}
func RemoveGoalsCommandAddSymbols(builder *flatbuffers.Builder, symbols flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(symbols), 0)
}
func RemoveGoalsCommandStartSymbolsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RemoveGoalsCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
