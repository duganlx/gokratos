// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CancelByIdCommandT struct {
	Time int64 `json:"time"`
	AuCode string `json:"au_code"`
	Symbol string `json:"symbol"`
	OrderId string `json:"order_id"`
}

func (t *CancelByIdCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	orderIdOffset := flatbuffers.UOffsetT(0)
	if t.OrderId != "" {
		orderIdOffset = builder.CreateString(t.OrderId)
	}
	CancelByIdCommandStart(builder)
	CancelByIdCommandAddTime(builder, t.Time)
	CancelByIdCommandAddAuCode(builder, auCodeOffset)
	CancelByIdCommandAddSymbol(builder, symbolOffset)
	CancelByIdCommandAddOrderId(builder, orderIdOffset)
	return CancelByIdCommandEnd(builder)
}

func (rcv *CancelByIdCommand) UnPackTo(t *CancelByIdCommandT) {
	t.Time = rcv.Time()
	t.AuCode = string(rcv.AuCode())
	t.Symbol = string(rcv.Symbol())
	t.OrderId = string(rcv.OrderId())
}

func (rcv *CancelByIdCommand) UnPack() *CancelByIdCommandT {
	if rcv == nil {
		return nil
	}
	t := &CancelByIdCommandT{}
	rcv.UnPackTo(t)
	return t
}

type CancelByIdCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsCancelByIdCommand(buf []byte, offset flatbuffers.UOffsetT) *CancelByIdCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CancelByIdCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishCancelByIdCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCancelByIdCommand(buf []byte, offset flatbuffers.UOffsetT) *CancelByIdCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CancelByIdCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCancelByIdCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CancelByIdCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CancelByIdCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CancelByIdCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CancelByIdCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CancelByIdCommand) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CancelByIdCommand) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CancelByIdCommand) OrderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CancelByIdCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CancelByIdCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func CancelByIdCommandAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(auCode), 0)
}
func CancelByIdCommandAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(symbol), 0)
}
func CancelByIdCommandAddOrderId(builder *flatbuffers.Builder, orderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(orderId), 0)
}
func CancelByIdCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
