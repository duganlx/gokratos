// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CancelAllCommandT struct {
	Time int64 `json:"time"`
	AuCode string `json:"au_code"`
}

func (t *CancelAllCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	CancelAllCommandStart(builder)
	CancelAllCommandAddTime(builder, t.Time)
	CancelAllCommandAddAuCode(builder, auCodeOffset)
	return CancelAllCommandEnd(builder)
}

func (rcv *CancelAllCommand) UnPackTo(t *CancelAllCommandT) {
	t.Time = rcv.Time()
	t.AuCode = string(rcv.AuCode())
}

func (rcv *CancelAllCommand) UnPack() *CancelAllCommandT {
	if rcv == nil {
		return nil
	}
	t := &CancelAllCommandT{}
	rcv.UnPackTo(t)
	return t
}

type CancelAllCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsCancelAllCommand(buf []byte, offset flatbuffers.UOffsetT) *CancelAllCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CancelAllCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishCancelAllCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCancelAllCommand(buf []byte, offset flatbuffers.UOffsetT) *CancelAllCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CancelAllCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCancelAllCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CancelAllCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CancelAllCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CancelAllCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CancelAllCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *CancelAllCommand) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CancelAllCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CancelAllCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func CancelAllCommandAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(auCode), 0)
}
func CancelAllCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
