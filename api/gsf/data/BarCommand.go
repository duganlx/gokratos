// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BarCommandT struct {
	Time int64 `json:"time"`
	Type BarType `json:"type"`
	Bars []*BarT `json:"bars"`
	Mode int16 `json:"mode"`
}

func (t *BarCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	barsOffset := flatbuffers.UOffsetT(0)
	if t.Bars != nil {
		barsLength := len(t.Bars)
		barsOffsets := make([]flatbuffers.UOffsetT, barsLength)
		for j := 0; j < barsLength; j++ {
			barsOffsets[j] = t.Bars[j].Pack(builder)
		}
		BarCommandStartBarsVector(builder, barsLength)
		for j := barsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(barsOffsets[j])
		}
		barsOffset = builder.EndVector(barsLength)
	}
	BarCommandStart(builder)
	BarCommandAddTime(builder, t.Time)
	BarCommandAddType(builder, t.Type)
	BarCommandAddBars(builder, barsOffset)
	BarCommandAddMode(builder, t.Mode)
	return BarCommandEnd(builder)
}

func (rcv *BarCommand) UnPackTo(t *BarCommandT) {
	t.Time = rcv.Time()
	t.Type = rcv.Type()
	barsLength := rcv.BarsLength()
	t.Bars = make([]*BarT, barsLength)
	for j := 0; j < barsLength; j++ {
		x := Bar{}
		rcv.Bars(&x, j)
		t.Bars[j] = x.UnPack()
	}
	t.Mode = rcv.Mode()
}

func (rcv *BarCommand) UnPack() *BarCommandT {
	if rcv == nil {
		return nil
	}
	t := &BarCommandT{}
	rcv.UnPackTo(t)
	return t
}

type BarCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsBarCommand(buf []byte, offset flatbuffers.UOffsetT) *BarCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BarCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishBarCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBarCommand(buf []byte, offset flatbuffers.UOffsetT) *BarCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BarCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBarCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *BarCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BarCommand) Table() flatbuffers.Table {
	return rcv._tab
}

/// 时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *BarCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *BarCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BarCommand) Type() BarType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BarType(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BarCommand) MutateType(n BarType) bool {
	return rcv._tab.MutateUint32Slot(6, uint32(n))
}

func (rcv *BarCommand) Bars(obj *Bar, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *BarCommand) BarsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// 时间模式，0 - History, 1 - Realtime, 2 - Both
func (rcv *BarCommand) Mode() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

/// 时间模式，0 - History, 1 - Realtime, 2 - Both
func (rcv *BarCommand) MutateMode(n int16) bool {
	return rcv._tab.MutateInt16Slot(10, n)
}

func BarCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func BarCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func BarCommandAddType(builder *flatbuffers.Builder, type_ BarType) {
	builder.PrependUint32Slot(1, uint32(type_), 0)
}
func BarCommandAddBars(builder *flatbuffers.Builder, bars flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(bars), 0)
}
func BarCommandStartBarsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BarCommandAddMode(builder *flatbuffers.Builder, mode int16) {
	builder.PrependInt16Slot(3, mode, 0)
}
func BarCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
