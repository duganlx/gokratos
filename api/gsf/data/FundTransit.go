// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FundTransitT struct {
	Id string `json:"id"`
	AuCode string `json:"au_code"`
	TransitSide TransitSide `json:"transit_side"`
	TransitType TransitType `json:"transit_type"`
	Symbol string `json:"symbol"`
	SecCnName string `json:"sec_cn_name"`
	Market string `json:"market"`
	Price float64 `json:"price"`
	Volume int64 `json:"volume"`
	Amount float64 `json:"amount"`
	Fee float64 `json:"fee"`
	Remark string `json:"remark"`
	OccurTime int64 `json:"occur_time"`
	OccurDate int32 `json:"occur_date"`
	SettleDate int64 `json:"settle_date"`
	EamCode int64 `json:"eam_code"`
}

func (t *FundTransitT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	idOffset := flatbuffers.UOffsetT(0)
	if t.Id != "" {
		idOffset = builder.CreateString(t.Id)
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	marketOffset := flatbuffers.UOffsetT(0)
	if t.Market != "" {
		marketOffset = builder.CreateString(t.Market)
	}
	remarkOffset := flatbuffers.UOffsetT(0)
	if t.Remark != "" {
		remarkOffset = builder.CreateString(t.Remark)
	}
	FundTransitStart(builder)
	FundTransitAddId(builder, idOffset)
	FundTransitAddAuCode(builder, auCodeOffset)
	FundTransitAddTransitSide(builder, t.TransitSide)
	FundTransitAddTransitType(builder, t.TransitType)
	FundTransitAddSymbol(builder, symbolOffset)
	FundTransitAddSecCnName(builder, secCnNameOffset)
	FundTransitAddMarket(builder, marketOffset)
	FundTransitAddPrice(builder, t.Price)
	FundTransitAddVolume(builder, t.Volume)
	FundTransitAddAmount(builder, t.Amount)
	FundTransitAddFee(builder, t.Fee)
	FundTransitAddRemark(builder, remarkOffset)
	FundTransitAddOccurTime(builder, t.OccurTime)
	FundTransitAddOccurDate(builder, t.OccurDate)
	FundTransitAddSettleDate(builder, t.SettleDate)
	FundTransitAddEamCode(builder, t.EamCode)
	return FundTransitEnd(builder)
}

func (rcv *FundTransit) UnPackTo(t *FundTransitT) {
	t.Id = string(rcv.Id())
	t.AuCode = string(rcv.AuCode())
	t.TransitSide = rcv.TransitSide()
	t.TransitType = rcv.TransitType()
	t.Symbol = string(rcv.Symbol())
	t.SecCnName = string(rcv.SecCnName())
	t.Market = string(rcv.Market())
	t.Price = rcv.Price()
	t.Volume = rcv.Volume()
	t.Amount = rcv.Amount()
	t.Fee = rcv.Fee()
	t.Remark = string(rcv.Remark())
	t.OccurTime = rcv.OccurTime()
	t.OccurDate = rcv.OccurDate()
	t.SettleDate = rcv.SettleDate()
	t.EamCode = rcv.EamCode()
}

func (rcv *FundTransit) UnPack() *FundTransitT {
	if rcv == nil {
		return nil
	}
	t := &FundTransitT{}
	rcv.UnPackTo(t)
	return t
}

type FundTransit struct {
	_tab flatbuffers.Table
}

func GetRootAsFundTransit(buf []byte, offset flatbuffers.UOffsetT) *FundTransit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FundTransit{}
	x.Init(buf, n+offset)
	return x
}

func FinishFundTransitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFundTransit(buf []byte, offset flatbuffers.UOffsetT) *FundTransit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FundTransit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFundTransitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FundTransit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FundTransit) Table() flatbuffers.Table {
	return rcv._tab
}

/// 交易流水号
func (rcv *FundTransit) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 交易流水号
/// 资产单元
func (rcv *FundTransit) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元
/// 转入转出方向，样例：0 - DEPOSIT，1 - WITHDRAW
func (rcv *FundTransit) TransitSide() TransitSide {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TransitSide(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 转入转出方向，样例：0 - DEPOSIT，1 - WITHDRAW
func (rcv *FundTransit) MutateTransitSide(n TransitSide) bool {
	return rcv._tab.MutateInt16Slot(8, int16(n))
}

/// 转入转出类型，样例：0 - DEFAULT，-1 - COST，1 - INCOME，2 - TRANSFER
func (rcv *FundTransit) TransitType() TransitType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return TransitType(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 转入转出类型，样例：0 - DEFAULT，-1 - COST，1 - INCOME，2 - TRANSFER
func (rcv *FundTransit) MutateTransitType(n TransitType) bool {
	return rcv._tab.MutateInt16Slot(10, int16(n))
}

/// 证券代码 (可为空)
func (rcv *FundTransit) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券代码 (可为空)
/// 证券名称 (可为空)
func (rcv *FundTransit) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券名称 (可为空)
/// 市场 (可为空)
func (rcv *FundTransit) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 市场 (可为空)
/// 价格 (可为空)
func (rcv *FundTransit) Price() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 价格 (可为空)
func (rcv *FundTransit) MutatePrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// 数量 (可为空)
func (rcv *FundTransit) Volume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 数量 (可为空)
func (rcv *FundTransit) MutateVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

/// 交易金额
func (rcv *FundTransit) Amount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 交易金额
func (rcv *FundTransit) MutateAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// 交易费用
func (rcv *FundTransit) Fee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 交易费用
func (rcv *FundTransit) MutateFee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 交易说明
func (rcv *FundTransit) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 交易说明
/// 发生时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *FundTransit) OccurTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 发生时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *FundTransit) MutateOccurTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

/// 发生日期，样例：20200701
func (rcv *FundTransit) OccurDate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 发生日期，样例：20200701
func (rcv *FundTransit) MutateOccurDate(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// 交割日期，Epoch时间(13位数字，UTC时区)，样例：1676017139000
/// 交割日期表示在当日开盘前，资金到账
func (rcv *FundTransit) SettleDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交割日期，Epoch时间(13位数字，UTC时区)，样例：1676017139000
/// 交割日期表示在当日开盘前，资金到账
func (rcv *FundTransit) MutateSettleDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

///EAM内部代码
func (rcv *FundTransit) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *FundTransit) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

func FundTransitStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func FundTransitAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func FundTransitAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(auCode), 0)
}
func FundTransitAddTransitSide(builder *flatbuffers.Builder, transitSide TransitSide) {
	builder.PrependInt16Slot(2, int16(transitSide), 0)
}
func FundTransitAddTransitType(builder *flatbuffers.Builder, transitType TransitType) {
	builder.PrependInt16Slot(3, int16(transitType), 0)
}
func FundTransitAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(symbol), 0)
}
func FundTransitAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(secCnName), 0)
}
func FundTransitAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(market), 0)
}
func FundTransitAddPrice(builder *flatbuffers.Builder, price float64) {
	builder.PrependFloat64Slot(7, price, 0.0)
}
func FundTransitAddVolume(builder *flatbuffers.Builder, volume int64) {
	builder.PrependInt64Slot(8, volume, 0)
}
func FundTransitAddAmount(builder *flatbuffers.Builder, amount float64) {
	builder.PrependFloat64Slot(9, amount, 0.0)
}
func FundTransitAddFee(builder *flatbuffers.Builder, fee float64) {
	builder.PrependFloat64Slot(10, fee, 0.0)
}
func FundTransitAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(remark), 0)
}
func FundTransitAddOccurTime(builder *flatbuffers.Builder, occurTime int64) {
	builder.PrependInt64Slot(12, occurTime, 0)
}
func FundTransitAddOccurDate(builder *flatbuffers.Builder, occurDate int32) {
	builder.PrependInt32Slot(13, occurDate, 0)
}
func FundTransitAddSettleDate(builder *flatbuffers.Builder, settleDate int64) {
	builder.PrependInt64Slot(14, settleDate, 0)
}
func FundTransitAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(15, eamCode, 0)
}
func FundTransitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
