// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SendBatchOrderCommandT struct {
	Time int64 `json:"time"`
	Orders []*OrderT `json:"orders"`
}

func (t *SendBatchOrderCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	ordersOffset := flatbuffers.UOffsetT(0)
	if t.Orders != nil {
		ordersLength := len(t.Orders)
		ordersOffsets := make([]flatbuffers.UOffsetT, ordersLength)
		for j := 0; j < ordersLength; j++ {
			ordersOffsets[j] = t.Orders[j].Pack(builder)
		}
		SendBatchOrderCommandStartOrdersVector(builder, ordersLength)
		for j := ordersLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(ordersOffsets[j])
		}
		ordersOffset = builder.EndVector(ordersLength)
	}
	SendBatchOrderCommandStart(builder)
	SendBatchOrderCommandAddTime(builder, t.Time)
	SendBatchOrderCommandAddOrders(builder, ordersOffset)
	return SendBatchOrderCommandEnd(builder)
}

func (rcv *SendBatchOrderCommand) UnPackTo(t *SendBatchOrderCommandT) {
	t.Time = rcv.Time()
	ordersLength := rcv.OrdersLength()
	t.Orders = make([]*OrderT, ordersLength)
	for j := 0; j < ordersLength; j++ {
		x := Order{}
		rcv.Orders(&x, j)
		t.Orders[j] = x.UnPack()
	}
}

func (rcv *SendBatchOrderCommand) UnPack() *SendBatchOrderCommandT {
	if rcv == nil {
		return nil
	}
	t := &SendBatchOrderCommandT{}
	rcv.UnPackTo(t)
	return t
}

type SendBatchOrderCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsSendBatchOrderCommand(buf []byte, offset flatbuffers.UOffsetT) *SendBatchOrderCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SendBatchOrderCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishSendBatchOrderCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSendBatchOrderCommand(buf []byte, offset flatbuffers.UOffsetT) *SendBatchOrderCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SendBatchOrderCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSendBatchOrderCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SendBatchOrderCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SendBatchOrderCommand) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SendBatchOrderCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SendBatchOrderCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SendBatchOrderCommand) Orders(obj *Order, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SendBatchOrderCommand) OrdersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SendBatchOrderCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SendBatchOrderCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func SendBatchOrderCommandAddOrders(builder *flatbuffers.Builder, orders flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(orders), 0)
}
func SendBatchOrderCommandStartOrdersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SendBatchOrderCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
