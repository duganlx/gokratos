// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RpcMsgT struct {
	Time int64 `json:"time"`
	Session string `json:"session"`
	Mid int64 `json:"mid"`
	Type RpcMsgType `json:"type"`
	Content string `json:"content"`
	Error string `json:"error"`
	Code RpcCode `json:"code"`
	Sync bool `json:"sync"`
	Elapsed int64 `json:"elapsed"`
	Ip string `json:"ip"`
	Mac string `json:"mac"`
	Token string `json:"token"`
}

func (t *RpcMsgT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	sessionOffset := flatbuffers.UOffsetT(0)
	if t.Session != "" {
		sessionOffset = builder.CreateString(t.Session)
	}
	contentOffset := flatbuffers.UOffsetT(0)
	if t.Content != "" {
		contentOffset = builder.CreateString(t.Content)
	}
	errorOffset := flatbuffers.UOffsetT(0)
	if t.Error != "" {
		errorOffset = builder.CreateString(t.Error)
	}
	ipOffset := flatbuffers.UOffsetT(0)
	if t.Ip != "" {
		ipOffset = builder.CreateString(t.Ip)
	}
	macOffset := flatbuffers.UOffsetT(0)
	if t.Mac != "" {
		macOffset = builder.CreateString(t.Mac)
	}
	tokenOffset := flatbuffers.UOffsetT(0)
	if t.Token != "" {
		tokenOffset = builder.CreateString(t.Token)
	}
	RpcMsgStart(builder)
	RpcMsgAddTime(builder, t.Time)
	RpcMsgAddSession(builder, sessionOffset)
	RpcMsgAddMid(builder, t.Mid)
	RpcMsgAddType(builder, t.Type)
	RpcMsgAddContent(builder, contentOffset)
	RpcMsgAddError(builder, errorOffset)
	RpcMsgAddCode(builder, t.Code)
	RpcMsgAddSync(builder, t.Sync)
	RpcMsgAddElapsed(builder, t.Elapsed)
	RpcMsgAddIp(builder, ipOffset)
	RpcMsgAddMac(builder, macOffset)
	RpcMsgAddToken(builder, tokenOffset)
	return RpcMsgEnd(builder)
}

func (rcv *RpcMsg) UnPackTo(t *RpcMsgT) {
	t.Time = rcv.Time()
	t.Session = string(rcv.Session())
	t.Mid = rcv.Mid()
	t.Type = rcv.Type()
	t.Content = string(rcv.Content())
	t.Error = string(rcv.Error())
	t.Code = rcv.Code()
	t.Sync = rcv.Sync()
	t.Elapsed = rcv.Elapsed()
	t.Ip = string(rcv.Ip())
	t.Mac = string(rcv.Mac())
	t.Token = string(rcv.Token())
}

func (rcv *RpcMsg) UnPack() *RpcMsgT {
	if rcv == nil {
		return nil
	}
	t := &RpcMsgT{}
	rcv.UnPackTo(t)
	return t
}

type RpcMsg struct {
	_tab flatbuffers.Table
}

func GetRootAsRpcMsg(buf []byte, offset flatbuffers.UOffsetT) *RpcMsg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RpcMsg{}
	x.Init(buf, n+offset)
	return x
}

func FinishRpcMsgBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRpcMsg(buf []byte, offset flatbuffers.UOffsetT) *RpcMsg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RpcMsg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRpcMsgBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RpcMsg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RpcMsg) Table() flatbuffers.Table {
	return rcv._tab
}

/// 时间戳 epoch
func (rcv *RpcMsg) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 时间戳 epoch
func (rcv *RpcMsg) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

/// 会话id
func (rcv *RpcMsg) Session() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 会话id
/// 消息id
func (rcv *RpcMsg) Mid() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 消息id
func (rcv *RpcMsg) MutateMid(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

/// 消息类型
func (rcv *RpcMsg) Type() RpcMsgType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return RpcMsgType(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 消息类型
func (rcv *RpcMsg) MutateType(n RpcMsgType) bool {
	return rcv._tab.MutateInt16Slot(10, int16(n))
}

/// 消息内容
func (rcv *RpcMsg) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 消息内容
/// 错误信息
func (rcv *RpcMsg) Error() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 错误信息
/// 响应码 (仅type=RSP有效)
func (rcv *RpcMsg) Code() RpcCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return RpcCode(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 响应码 (仅type=RSP有效)
func (rcv *RpcMsg) MutateCode(n RpcCode) bool {
	return rcv._tab.MutateInt16Slot(16, int16(n))
}

/// 是否同步
func (rcv *RpcMsg) Sync() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// 是否同步
func (rcv *RpcMsg) MutateSync(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// 响应时间，单位微秒
func (rcv *RpcMsg) Elapsed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 响应时间，单位微秒
func (rcv *RpcMsg) MutateElapsed(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

/// IP地址
func (rcv *RpcMsg) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// IP地址
/// Mac地址
func (rcv *RpcMsg) Mac() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mac地址
func (rcv *RpcMsg) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RpcMsgStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func RpcMsgAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func RpcMsgAddSession(builder *flatbuffers.Builder, session flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(session), 0)
}
func RpcMsgAddMid(builder *flatbuffers.Builder, mid int64) {
	builder.PrependInt64Slot(2, mid, 0)
}
func RpcMsgAddType(builder *flatbuffers.Builder, type_ RpcMsgType) {
	builder.PrependInt16Slot(3, int16(type_), 0)
}
func RpcMsgAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(content), 0)
}
func RpcMsgAddError(builder *flatbuffers.Builder, error flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(error), 0)
}
func RpcMsgAddCode(builder *flatbuffers.Builder, code RpcCode) {
	builder.PrependInt16Slot(6, int16(code), 0)
}
func RpcMsgAddSync(builder *flatbuffers.Builder, sync bool) {
	builder.PrependBoolSlot(7, sync, false)
}
func RpcMsgAddElapsed(builder *flatbuffers.Builder, elapsed int64) {
	builder.PrependInt64Slot(8, elapsed, 0)
}
func RpcMsgAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ip), 0)
}
func RpcMsgAddMac(builder *flatbuffers.Builder, mac flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(mac), 0)
}
func RpcMsgAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(token), 0)
}
func RpcMsgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
