// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DividendT struct {
	CodeId string `json:"code_id"`
	Symbol string `json:"symbol"`
	Market string `json:"market"`
	RightRegDate int64 `json:"right_reg_date"`
	AssigneeType string `json:"assignee_type"`
	ShareToAccountDate int64 `json:"share_to_account_date"`
	ShareListIngDate int64 `json:"share_list_ing_date"`
	DivipayDate int64 `json:"divipay_date"`
	ExdividendDate int64 `json:"exdividend_date"`
	SharebaseDate int64 `json:"sharebase_date"`
	Cashbtaxrmb float64 `json:"cashbtaxrmb"`
	Cashataxrmb float64 `json:"cashataxrmb"`
	Shhlcyhrmb float64 `json:"shhlcyhrmb"`
	TransferRatio float64 `json:"transfer_ratio"`
	TotalTransfer float64 `json:"total_transfer"`
	BonusRatio float64 `json:"bonus_ratio"`
	TotalBonus float64 `json:"total_bonus"`
	EamCode int64 `json:"eam_code"`
}

func (t *DividendT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	codeIdOffset := flatbuffers.UOffsetT(0)
	if t.CodeId != "" {
		codeIdOffset = builder.CreateString(t.CodeId)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	marketOffset := flatbuffers.UOffsetT(0)
	if t.Market != "" {
		marketOffset = builder.CreateString(t.Market)
	}
	assigneeTypeOffset := flatbuffers.UOffsetT(0)
	if t.AssigneeType != "" {
		assigneeTypeOffset = builder.CreateString(t.AssigneeType)
	}
	DividendStart(builder)
	DividendAddCodeId(builder, codeIdOffset)
	DividendAddSymbol(builder, symbolOffset)
	DividendAddMarket(builder, marketOffset)
	DividendAddRightRegDate(builder, t.RightRegDate)
	DividendAddAssigneeType(builder, assigneeTypeOffset)
	DividendAddShareToAccountDate(builder, t.ShareToAccountDate)
	DividendAddShareListIngDate(builder, t.ShareListIngDate)
	DividendAddDivipayDate(builder, t.DivipayDate)
	DividendAddExdividendDate(builder, t.ExdividendDate)
	DividendAddSharebaseDate(builder, t.SharebaseDate)
	DividendAddCashbtaxrmb(builder, t.Cashbtaxrmb)
	DividendAddCashataxrmb(builder, t.Cashataxrmb)
	DividendAddShhlcyhrmb(builder, t.Shhlcyhrmb)
	DividendAddTransferRatio(builder, t.TransferRatio)
	DividendAddTotalTransfer(builder, t.TotalTransfer)
	DividendAddBonusRatio(builder, t.BonusRatio)
	DividendAddTotalBonus(builder, t.TotalBonus)
	DividendAddEamCode(builder, t.EamCode)
	return DividendEnd(builder)
}

func (rcv *Dividend) UnPackTo(t *DividendT) {
	t.CodeId = string(rcv.CodeId())
	t.Symbol = string(rcv.Symbol())
	t.Market = string(rcv.Market())
	t.RightRegDate = rcv.RightRegDate()
	t.AssigneeType = string(rcv.AssigneeType())
	t.ShareToAccountDate = rcv.ShareToAccountDate()
	t.ShareListIngDate = rcv.ShareListIngDate()
	t.DivipayDate = rcv.DivipayDate()
	t.ExdividendDate = rcv.ExdividendDate()
	t.SharebaseDate = rcv.SharebaseDate()
	t.Cashbtaxrmb = rcv.Cashbtaxrmb()
	t.Cashataxrmb = rcv.Cashataxrmb()
	t.Shhlcyhrmb = rcv.Shhlcyhrmb()
	t.TransferRatio = rcv.TransferRatio()
	t.TotalTransfer = rcv.TotalTransfer()
	t.BonusRatio = rcv.BonusRatio()
	t.TotalBonus = rcv.TotalBonus()
	t.EamCode = rcv.EamCode()
}

func (rcv *Dividend) UnPack() *DividendT {
	if rcv == nil {
		return nil
	}
	t := &DividendT{}
	rcv.UnPackTo(t)
	return t
}

type Dividend struct {
	_tab flatbuffers.Table
}

func GetRootAsDividend(buf []byte, offset flatbuffers.UOffsetT) *Dividend {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Dividend{}
	x.Init(buf, n+offset)
	return x
}

func FinishDividendBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDividend(buf []byte, offset flatbuffers.UOffsetT) *Dividend {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Dividend{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDividendBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Dividend) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Dividend) Table() flatbuffers.Table {
	return rcv._tab
}

/// 证券代码
func (rcv *Dividend) CodeId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券代码
/// 证券代码
func (rcv *Dividend) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券代码
/// 市场类型
func (rcv *Dividend) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 市场类型
/// 股权登记日
func (rcv *Dividend) RightRegDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 股权登记日
func (rcv *Dividend) MutateRightRegDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

/// 分配对象类型
func (rcv *Dividend) AssigneeType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 分配对象类型
/// 送(转增)股份到账日
func (rcv *Dividend) ShareToAccountDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 送(转增)股份到账日
func (rcv *Dividend) MutateShareToAccountDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

/// 新增股份上市流通日
func (rcv *Dividend) ShareListIngDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 新增股份上市流通日
func (rcv *Dividend) MutateShareListIngDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

/// 现金红利发放日
func (rcv *Dividend) DivipayDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 现金红利发放日
func (rcv *Dividend) MutateDivipayDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

/// 除权除息日
func (rcv *Dividend) ExdividendDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 除权除息日
func (rcv *Dividend) MutateExdividendDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

/// 股本基准日
func (rcv *Dividend) SharebaseDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 股本基准日
func (rcv *Dividend) MutateSharebaseDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(22, n)
}

/// 税前红利(人民币)
func (rcv *Dividend) Cashbtaxrmb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 税前红利(人民币)
func (rcv *Dividend) MutateCashbtaxrmb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 税后红利(人民币)
func (rcv *Dividend) Cashataxrmb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 税后红利(人民币)
func (rcv *Dividend) MutateCashataxrmb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// 差异化税后红利(人民币)
func (rcv *Dividend) Shhlcyhrmb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 差异化税后红利(人民币)
func (rcv *Dividend) MutateShhlcyhrmb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// 转增比例(10:X)
func (rcv *Dividend) TransferRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 转增比例(10:X)
func (rcv *Dividend) MutateTransferRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// 转增数量
func (rcv *Dividend) TotalTransfer() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 转增数量
func (rcv *Dividend) MutateTotalTransfer(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// 送股比例(10:X)
func (rcv *Dividend) BonusRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 送股比例(10:X)
func (rcv *Dividend) MutateBonusRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// 送股数量
func (rcv *Dividend) TotalBonus() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 送股数量
func (rcv *Dividend) MutateTotalBonus(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

///EAM内部代码
func (rcv *Dividend) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *Dividend) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

func DividendStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func DividendAddCodeId(builder *flatbuffers.Builder, codeId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(codeId), 0)
}
func DividendAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func DividendAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(market), 0)
}
func DividendAddRightRegDate(builder *flatbuffers.Builder, rightRegDate int64) {
	builder.PrependInt64Slot(3, rightRegDate, 0)
}
func DividendAddAssigneeType(builder *flatbuffers.Builder, assigneeType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(assigneeType), 0)
}
func DividendAddShareToAccountDate(builder *flatbuffers.Builder, shareToAccountDate int64) {
	builder.PrependInt64Slot(5, shareToAccountDate, 0)
}
func DividendAddShareListIngDate(builder *flatbuffers.Builder, shareListIngDate int64) {
	builder.PrependInt64Slot(6, shareListIngDate, 0)
}
func DividendAddDivipayDate(builder *flatbuffers.Builder, divipayDate int64) {
	builder.PrependInt64Slot(7, divipayDate, 0)
}
func DividendAddExdividendDate(builder *flatbuffers.Builder, exdividendDate int64) {
	builder.PrependInt64Slot(8, exdividendDate, 0)
}
func DividendAddSharebaseDate(builder *flatbuffers.Builder, sharebaseDate int64) {
	builder.PrependInt64Slot(9, sharebaseDate, 0)
}
func DividendAddCashbtaxrmb(builder *flatbuffers.Builder, cashbtaxrmb float64) {
	builder.PrependFloat64Slot(10, cashbtaxrmb, 0.0)
}
func DividendAddCashataxrmb(builder *flatbuffers.Builder, cashataxrmb float64) {
	builder.PrependFloat64Slot(11, cashataxrmb, 0.0)
}
func DividendAddShhlcyhrmb(builder *flatbuffers.Builder, shhlcyhrmb float64) {
	builder.PrependFloat64Slot(12, shhlcyhrmb, 0.0)
}
func DividendAddTransferRatio(builder *flatbuffers.Builder, transferRatio float64) {
	builder.PrependFloat64Slot(13, transferRatio, 0.0)
}
func DividendAddTotalTransfer(builder *flatbuffers.Builder, totalTransfer float64) {
	builder.PrependFloat64Slot(14, totalTransfer, 0.0)
}
func DividendAddBonusRatio(builder *flatbuffers.Builder, bonusRatio float64) {
	builder.PrependFloat64Slot(15, bonusRatio, 0.0)
}
func DividendAddTotalBonus(builder *flatbuffers.Builder, totalBonus float64) {
	builder.PrependFloat64Slot(16, totalBonus, 0.0)
}
func DividendAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(17, eamCode, 0)
}
func DividendEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
