// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PositionT struct {
	AuCode string `json:"au_code"`
	Symbol string `json:"symbol"`
	SecCnName string `json:"sec_cn_name"`
	Side OrderSide `json:"side"`
	AvailableVolume int64 `json:"available_volume"`
	TotalVolume int64 `json:"total_volume"`
	TodayOpen int64 `json:"today_open"`
	PreVolume int64 `json:"pre_volume"`
	FrozenVolume int64 `json:"frozen_volume"`
	MarketValue float64 `json:"market_value"`
	PreMtm float64 `json:"pre_mtm"`
	Mtm float64 `json:"mtm"`
	IsSettled int16 `json:"is_settled"`
	CreateTime int64 `json:"create_time"`
	UpdateTime int64 `json:"update_time"`
	TradeDate int64 `json:"trade_date"`
	EamCode int64 `json:"eam_code"`
	PreClose float64 `json:"pre_close"`
	EquityBuy float64 `json:"equity_buy"`
	EquitySell float64 `json:"equity_sell"`
}

func (t *PositionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	secCnNameOffset := flatbuffers.UOffsetT(0)
	if t.SecCnName != "" {
		secCnNameOffset = builder.CreateString(t.SecCnName)
	}
	PositionStart(builder)
	PositionAddAuCode(builder, auCodeOffset)
	PositionAddSymbol(builder, symbolOffset)
	PositionAddSecCnName(builder, secCnNameOffset)
	PositionAddSide(builder, t.Side)
	PositionAddAvailableVolume(builder, t.AvailableVolume)
	PositionAddTotalVolume(builder, t.TotalVolume)
	PositionAddTodayOpen(builder, t.TodayOpen)
	PositionAddPreVolume(builder, t.PreVolume)
	PositionAddFrozenVolume(builder, t.FrozenVolume)
	PositionAddMarketValue(builder, t.MarketValue)
	PositionAddPreMtm(builder, t.PreMtm)
	PositionAddMtm(builder, t.Mtm)
	PositionAddIsSettled(builder, t.IsSettled)
	PositionAddCreateTime(builder, t.CreateTime)
	PositionAddUpdateTime(builder, t.UpdateTime)
	PositionAddTradeDate(builder, t.TradeDate)
	PositionAddEamCode(builder, t.EamCode)
	PositionAddPreClose(builder, t.PreClose)
	PositionAddEquityBuy(builder, t.EquityBuy)
	PositionAddEquitySell(builder, t.EquitySell)
	return PositionEnd(builder)
}

func (rcv *Position) UnPackTo(t *PositionT) {
	t.AuCode = string(rcv.AuCode())
	t.Symbol = string(rcv.Symbol())
	t.SecCnName = string(rcv.SecCnName())
	t.Side = rcv.Side()
	t.AvailableVolume = rcv.AvailableVolume()
	t.TotalVolume = rcv.TotalVolume()
	t.TodayOpen = rcv.TodayOpen()
	t.PreVolume = rcv.PreVolume()
	t.FrozenVolume = rcv.FrozenVolume()
	t.MarketValue = rcv.MarketValue()
	t.PreMtm = rcv.PreMtm()
	t.Mtm = rcv.Mtm()
	t.IsSettled = rcv.IsSettled()
	t.CreateTime = rcv.CreateTime()
	t.UpdateTime = rcv.UpdateTime()
	t.TradeDate = rcv.TradeDate()
	t.EamCode = rcv.EamCode()
	t.PreClose = rcv.PreClose()
	t.EquityBuy = rcv.EquityBuy()
	t.EquitySell = rcv.EquitySell()
}

func (rcv *Position) UnPack() *PositionT {
	if rcv == nil {
		return nil
	}
	t := &PositionT{}
	rcv.UnPackTo(t)
	return t
}

type Position struct {
	_tab flatbuffers.Table
}

func GetRootAsPosition(buf []byte, offset flatbuffers.UOffsetT) *Position {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Position{}
	x.Init(buf, n+offset)
	return x
}

func FinishPositionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPosition(buf []byte, offset flatbuffers.UOffsetT) *Position {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Position{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPositionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Position) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Position) Table() flatbuffers.Table {
	return rcv._tab
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
func (rcv *Position) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元索引，最小颗粒度的清算单元，可能与外部系统的资产单元不一致
///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
func (rcv *Position) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///证券代码（统一标准）
///例如：000001.SZ,600000.SH,00700.HK
///中文名称
func (rcv *Position) SecCnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///中文名称
///买卖方向，默认为买入(现货)
func (rcv *Position) Side() OrderSide {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return OrderSide(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

///买卖方向，默认为买入(现货)
func (rcv *Position) MutateSide(n OrderSide) bool {
	return rcv._tab.MutateInt16Slot(10, int16(n))
}

/// 可卖数量(单位:股) = 日初持仓数量 - 今日卖出数量
func (rcv *Position) AvailableVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 可卖数量(单位:股) = 日初持仓数量 - 今日卖出数量
func (rcv *Position) MutateAvailableVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

/// 总量(单位:股) = 可卖数量 + 今日买入数量
func (rcv *Position) TotalVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 总量(单位:股) = 可卖数量 + 今日买入数量
func (rcv *Position) MutateTotalVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

/// 今日买入数量(单位:股)
func (rcv *Position) TodayOpen() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 今日买入数量(单位:股)
func (rcv *Position) MutateTodayOpen(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

/// 日初持仓数量
func (rcv *Position) PreVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 日初持仓数量
func (rcv *Position) MutatePreVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

/// 卖冻结
func (rcv *Position) FrozenVolume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖冻结
func (rcv *Position) MutateFrozenVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(20, n)
}

/// 市值
func (rcv *Position) MarketValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 市值
func (rcv *Position) MutateMarketValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// 前盯市价格
func (rcv *Position) PreMtm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 前盯市价格
func (rcv *Position) MutatePreMtm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 盯市价格(Mark to Market), 盘中时为实时价格, 盘后为结算价
func (rcv *Position) Mtm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 盯市价格(Mark to Market), 盘中时为实时价格, 盘后为结算价
func (rcv *Position) MutateMtm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// 是否已结算, 1:已结算, 0:预结算
func (rcv *Position) IsSettled() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

/// 是否已结算, 1:已结算, 0:预结算
func (rcv *Position) MutateIsSettled(n int16) bool {
	return rcv._tab.MutateInt16Slot(28, n)
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Position) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Position) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Position) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Position) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(32, n)
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Position) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Position) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

///EAM内部代码
func (rcv *Position) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///EAM内部代码
func (rcv *Position) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

/// 前收盘价
func (rcv *Position) PreClose() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 前收盘价
func (rcv *Position) MutatePreClose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// 今日买入市值
func (rcv *Position) EquityBuy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 今日买入市值
func (rcv *Position) MutateEquityBuy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// 今日卖出市值
func (rcv *Position) EquitySell() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 今日卖出市值
func (rcv *Position) MutateEquitySell(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

func PositionStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func PositionAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auCode), 0)
}
func PositionAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func PositionAddSecCnName(builder *flatbuffers.Builder, secCnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(secCnName), 0)
}
func PositionAddSide(builder *flatbuffers.Builder, side OrderSide) {
	builder.PrependInt16Slot(3, int16(side), 0)
}
func PositionAddAvailableVolume(builder *flatbuffers.Builder, availableVolume int64) {
	builder.PrependInt64Slot(4, availableVolume, 0)
}
func PositionAddTotalVolume(builder *flatbuffers.Builder, totalVolume int64) {
	builder.PrependInt64Slot(5, totalVolume, 0)
}
func PositionAddTodayOpen(builder *flatbuffers.Builder, todayOpen int64) {
	builder.PrependInt64Slot(6, todayOpen, 0)
}
func PositionAddPreVolume(builder *flatbuffers.Builder, preVolume int64) {
	builder.PrependInt64Slot(7, preVolume, 0)
}
func PositionAddFrozenVolume(builder *flatbuffers.Builder, frozenVolume int64) {
	builder.PrependInt64Slot(8, frozenVolume, 0)
}
func PositionAddMarketValue(builder *flatbuffers.Builder, marketValue float64) {
	builder.PrependFloat64Slot(9, marketValue, 0.0)
}
func PositionAddPreMtm(builder *flatbuffers.Builder, preMtm float64) {
	builder.PrependFloat64Slot(10, preMtm, 0.0)
}
func PositionAddMtm(builder *flatbuffers.Builder, mtm float64) {
	builder.PrependFloat64Slot(11, mtm, 0.0)
}
func PositionAddIsSettled(builder *flatbuffers.Builder, isSettled int16) {
	builder.PrependInt16Slot(12, isSettled, 0)
}
func PositionAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(13, createTime, 0)
}
func PositionAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(14, updateTime, 0)
}
func PositionAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(15, tradeDate, 0)
}
func PositionAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(16, eamCode, 0)
}
func PositionAddPreClose(builder *flatbuffers.Builder, preClose float64) {
	builder.PrependFloat64Slot(17, preClose, 0.0)
}
func PositionAddEquityBuy(builder *flatbuffers.Builder, equityBuy float64) {
	builder.PrependFloat64Slot(18, equityBuy, 0.0)
}
func PositionAddEquitySell(builder *flatbuffers.Builder, equitySell float64) {
	builder.PrependFloat64Slot(19, equitySell, 0.0)
}
func PositionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
