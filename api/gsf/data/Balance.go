// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BalanceT struct {
	AuName string `json:"au_name"`
	AuCode string `json:"au_code"`
	Currency string `json:"currency"`
	Type AccountType `json:"type"`
	NetAsset float64 `json:"net_asset"`
	TotalAssetInitial float64 `json:"total_asset_initial"`
	TotalAsset float64 `json:"total_asset"`
	EquityInitial float64 `json:"equity_initial"`
	Equity float64 `json:"equity"`
	EquityInTransit float64 `json:"equity_in_transit"`
	EquityDeposit float64 `json:"equity_deposit"`
	EquityWithdraw float64 `json:"equity_withdraw"`
	NetEquityTraded float64 `json:"net_equity_traded"`
	EquityBuy float64 `json:"equity_buy"`
	EquitySell float64 `json:"equity_sell"`
	FundInitial float64 `json:"fund_initial"`
	FundDepositWithdraw float64 `json:"fund_deposit_withdraw"`
	FundDeposit float64 `json:"fund_deposit"`
	FundWithdraw float64 `json:"fund_withdraw"`
	FundAvailable float64 `json:"fund_available"`
	FundInTransit float64 `json:"fund_in_transit"`
	FundFrozen float64 `json:"fund_frozen"`
	Balance float64 `json:"balance"`
	TotalLiabilityInitial float64 `json:"total_liability_initial"`
	TotalLiability float64 `json:"total_liability"`
	CashDebtInitial float64 `json:"cash_debt_initial"`
	CashDebt float64 `json:"cash_debt"`
	SecurityDebtInitial float64 `json:"security_debt_initial"`
	SecurityDebt float64 `json:"security_debt"`
	Commission float64 `json:"commission"`
	CreateTime int64 `json:"create_time"`
	UpdateTime int64 `json:"update_time"`
	SettleTime int64 `json:"settle_time"`
	TradeDate int64 `json:"trade_date"`
	IsSettled int16 `json:"is_settled"`
}

func (t *BalanceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	auNameOffset := flatbuffers.UOffsetT(0)
	if t.AuName != "" {
		auNameOffset = builder.CreateString(t.AuName)
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	currencyOffset := flatbuffers.UOffsetT(0)
	if t.Currency != "" {
		currencyOffset = builder.CreateString(t.Currency)
	}
	BalanceStart(builder)
	BalanceAddAuName(builder, auNameOffset)
	BalanceAddAuCode(builder, auCodeOffset)
	BalanceAddCurrency(builder, currencyOffset)
	BalanceAddType(builder, t.Type)
	BalanceAddNetAsset(builder, t.NetAsset)
	BalanceAddTotalAssetInitial(builder, t.TotalAssetInitial)
	BalanceAddTotalAsset(builder, t.TotalAsset)
	BalanceAddEquityInitial(builder, t.EquityInitial)
	BalanceAddEquity(builder, t.Equity)
	BalanceAddEquityInTransit(builder, t.EquityInTransit)
	BalanceAddEquityDeposit(builder, t.EquityDeposit)
	BalanceAddEquityWithdraw(builder, t.EquityWithdraw)
	BalanceAddNetEquityTraded(builder, t.NetEquityTraded)
	BalanceAddEquityBuy(builder, t.EquityBuy)
	BalanceAddEquitySell(builder, t.EquitySell)
	BalanceAddFundInitial(builder, t.FundInitial)
	BalanceAddFundDepositWithdraw(builder, t.FundDepositWithdraw)
	BalanceAddFundDeposit(builder, t.FundDeposit)
	BalanceAddFundWithdraw(builder, t.FundWithdraw)
	BalanceAddFundAvailable(builder, t.FundAvailable)
	BalanceAddFundInTransit(builder, t.FundInTransit)
	BalanceAddFundFrozen(builder, t.FundFrozen)
	BalanceAddBalance(builder, t.Balance)
	BalanceAddTotalLiabilityInitial(builder, t.TotalLiabilityInitial)
	BalanceAddTotalLiability(builder, t.TotalLiability)
	BalanceAddCashDebtInitial(builder, t.CashDebtInitial)
	BalanceAddCashDebt(builder, t.CashDebt)
	BalanceAddSecurityDebtInitial(builder, t.SecurityDebtInitial)
	BalanceAddSecurityDebt(builder, t.SecurityDebt)
	BalanceAddCommission(builder, t.Commission)
	BalanceAddCreateTime(builder, t.CreateTime)
	BalanceAddUpdateTime(builder, t.UpdateTime)
	BalanceAddSettleTime(builder, t.SettleTime)
	BalanceAddTradeDate(builder, t.TradeDate)
	BalanceAddIsSettled(builder, t.IsSettled)
	return BalanceEnd(builder)
}

func (rcv *Balance) UnPackTo(t *BalanceT) {
	t.AuName = string(rcv.AuName())
	t.AuCode = string(rcv.AuCode())
	t.Currency = string(rcv.Currency())
	t.Type = rcv.Type()
	t.NetAsset = rcv.NetAsset()
	t.TotalAssetInitial = rcv.TotalAssetInitial()
	t.TotalAsset = rcv.TotalAsset()
	t.EquityInitial = rcv.EquityInitial()
	t.Equity = rcv.Equity()
	t.EquityInTransit = rcv.EquityInTransit()
	t.EquityDeposit = rcv.EquityDeposit()
	t.EquityWithdraw = rcv.EquityWithdraw()
	t.NetEquityTraded = rcv.NetEquityTraded()
	t.EquityBuy = rcv.EquityBuy()
	t.EquitySell = rcv.EquitySell()
	t.FundInitial = rcv.FundInitial()
	t.FundDepositWithdraw = rcv.FundDepositWithdraw()
	t.FundDeposit = rcv.FundDeposit()
	t.FundWithdraw = rcv.FundWithdraw()
	t.FundAvailable = rcv.FundAvailable()
	t.FundInTransit = rcv.FundInTransit()
	t.FundFrozen = rcv.FundFrozen()
	t.Balance = rcv.Balance()
	t.TotalLiabilityInitial = rcv.TotalLiabilityInitial()
	t.TotalLiability = rcv.TotalLiability()
	t.CashDebtInitial = rcv.CashDebtInitial()
	t.CashDebt = rcv.CashDebt()
	t.SecurityDebtInitial = rcv.SecurityDebtInitial()
	t.SecurityDebt = rcv.SecurityDebt()
	t.Commission = rcv.Commission()
	t.CreateTime = rcv.CreateTime()
	t.UpdateTime = rcv.UpdateTime()
	t.SettleTime = rcv.SettleTime()
	t.TradeDate = rcv.TradeDate()
	t.IsSettled = rcv.IsSettled()
}

func (rcv *Balance) UnPack() *BalanceT {
	if rcv == nil {
		return nil
	}
	t := &BalanceT{}
	rcv.UnPackTo(t)
	return t
}

type Balance struct {
	_tab flatbuffers.Table
}

func GetRootAsBalance(buf []byte, offset flatbuffers.UOffsetT) *Balance {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Balance{}
	x.Init(buf, n+offset)
	return x
}

func FinishBalanceBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsBalance(buf []byte, offset flatbuffers.UOffsetT) *Balance {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Balance{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBalanceBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Balance) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Balance) Table() flatbuffers.Table {
	return rcv._tab
}

/// 结算单元名称
func (rcv *Balance) AuName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 结算单元名称
/// 结算单元索引，最小颗粒度的清算单元，可能与外部系统的结算单元不一致
func (rcv *Balance) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 结算单元索引，最小颗粒度的清算单元，可能与外部系统的结算单元不一致
/// 货币
func (rcv *Balance) Currency() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 货币
/// 账户类型: 0-普通账户 1-信用账户 2-衍生品账户
func (rcv *Balance) Type() AccountType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return AccountType(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 账户类型: 0-普通账户 1-信用账户 2-衍生品账户
func (rcv *Balance) MutateType(n AccountType) bool {
	return rcv._tab.MutateInt16Slot(10, int16(n))
}

/// 净资产 = 总资产 - 总负债
func (rcv *Balance) NetAsset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 净资产 = 总资产 - 总负债
func (rcv *Balance) MutateNetAsset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// 日初总资产 = 日初持仓市值 + 日初资金余额
func (rcv *Balance) TotalAssetInitial() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 日初总资产 = 日初持仓市值 + 日初资金余额
func (rcv *Balance) MutateTotalAssetInitial(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// 总资产 = 持仓市值 + 在途市值 + 资金余额
func (rcv *Balance) TotalAsset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 总资产 = 持仓市值 + 在途市值 + 资金余额
func (rcv *Balance) MutateTotalAsset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// 日初市值 = T-1日持仓市值(结算后)
func (rcv *Balance) EquityInitial() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 日初市值 = T-1日持仓市值(结算后)
func (rcv *Balance) MutateEquityInitial(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// 持仓市值 (不包含在途市值)
func (rcv *Balance) Equity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 持仓市值 (不包含在途市值)
func (rcv *Balance) MutateEquity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// 在途市值 (证券的在途市值)
func (rcv *Balance) EquityInTransit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 在途市值 (证券的在途市值)
func (rcv *Balance) MutateEquityInTransit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// 转入证券市值 (包含结算单元交接的转入，计算盈亏时加到日初总资产，剔除转入转出导致的盈亏影响)
func (rcv *Balance) EquityDeposit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 转入证券市值 (包含结算单元交接的转入，计算盈亏时加到日初总资产，剔除转入转出导致的盈亏影响)
func (rcv *Balance) MutateEquityDeposit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 转出证券市值 (包含结算单元交接的转出，计算盈亏时加回到总资产，剔除转入转出导致的盈亏影响)
func (rcv *Balance) EquityWithdraw() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 转出证券市值 (包含结算单元交接的转出，计算盈亏时加回到总资产，剔除转入转出导致的盈亏影响)
func (rcv *Balance) MutateEquityWithdraw(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// 净买入证券市值 = 买入证券市值 - 卖出证券市值
func (rcv *Balance) NetEquityTraded() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 净买入证券市值 = 买入证券市值 - 卖出证券市值
func (rcv *Balance) MutateNetEquityTraded(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// 买入证券市值
func (rcv *Balance) EquityBuy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 买入证券市值
func (rcv *Balance) MutateEquityBuy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// 卖出证券市值
func (rcv *Balance) EquitySell() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 卖出证券市值
func (rcv *Balance) MutateEquitySell(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// 日初资金 = T-1日资金余额(结算后) + T日出入金(用于结算单元交接)
func (rcv *Balance) FundInitial() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 日初资金 = T-1日资金余额(结算后) + T日出入金(用于结算单元交接)
func (rcv *Balance) MutateFundInitial(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// 净出入金 = 入金 - 出金
func (rcv *Balance) FundDepositWithdraw() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 净出入金 = 入金 - 出金
func (rcv *Balance) MutateFundDepositWithdraw(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// 入金 (包含结算单元交接的入金，计算盈亏时加到日初总资产，剔除出入金导致的盈亏影响)
func (rcv *Balance) FundDeposit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 入金 (包含结算单元交接的入金，计算盈亏时加到日初总资产，剔除出入金导致的盈亏影响)
func (rcv *Balance) MutateFundDeposit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// 出金 (包含结算单元交接的出金，计算盈亏时加回到总资产，剔除出入金导致的盈亏影响)
func (rcv *Balance) FundWithdraw() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 出金 (包含结算单元交接的出金，计算盈亏时加回到总资产，剔除出入金导致的盈亏影响)
func (rcv *Balance) MutateFundWithdraw(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// 可用资金
func (rcv *Balance) FundAvailable() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 可用资金
func (rcv *Balance) MutateFundAvailable(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// 在途资金
func (rcv *Balance) FundInTransit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 在途资金
func (rcv *Balance) MutateFundInTransit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// 冻结资金
func (rcv *Balance) FundFrozen() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 冻结资金
func (rcv *Balance) MutateFundFrozen(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// 资金余额 = 可用资金 + 在途资金 + 冻结资金
func (rcv *Balance) Balance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 资金余额 = 可用资金 + 在途资金 + 冻结资金
func (rcv *Balance) MutateBalance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// 日初总负债 (适用于信用账户)
func (rcv *Balance) TotalLiabilityInitial() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 日初总负债 (适用于信用账户)
func (rcv *Balance) MutateTotalLiabilityInitial(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// 总负债 = 资金负债 + 证券负债;  (适用于信用账户)
func (rcv *Balance) TotalLiability() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 总负债 = 资金负债 + 证券负债;  (适用于信用账户)
func (rcv *Balance) MutateTotalLiability(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// 日初资金负债  (适用于信用账户)
func (rcv *Balance) CashDebtInitial() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 日初资金负债  (适用于信用账户)
func (rcv *Balance) MutateCashDebtInitial(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// 资金负债，指资金的借贷，包括融资融券 (适用于信用账户)
func (rcv *Balance) CashDebt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 资金负债，指资金的借贷，包括融资融券 (适用于信用账户)
func (rcv *Balance) MutateCashDebt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// 日初证券负债 (适用于信用账户)
func (rcv *Balance) SecurityDebtInitial() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 日初证券负债 (适用于信用账户)
func (rcv *Balance) MutateSecurityDebtInitial(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// 证券负债，指证券的借贷，包括融资融券 (适用于信用账户)
func (rcv *Balance) SecurityDebt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 证券负债，指证券的借贷，包括融资融券 (适用于信用账户)
func (rcv *Balance) MutateSecurityDebt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// 手续费(手续费只有在结算后才会统一从可用资金、资金余额、总资产中扣除)
func (rcv *Balance) Commission() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 手续费(手续费只有在结算后才会统一从可用资金、资金余额、总资产中扣除)
func (rcv *Balance) MutateCommission(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(64, n)
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(66, n)
}

/// 结算时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) SettleTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 结算时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) MutateSettleTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(68, n)
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *Balance) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(70, n)
}

/// 是否已结算, 1:已结算, 0:预结算
func (rcv *Balance) IsSettled() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

/// 是否已结算, 1:已结算, 0:预结算
func (rcv *Balance) MutateIsSettled(n int16) bool {
	return rcv._tab.MutateInt16Slot(72, n)
}

func BalanceStart(builder *flatbuffers.Builder) {
	builder.StartObject(35)
}
func BalanceAddAuName(builder *flatbuffers.Builder, auName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(auName), 0)
}
func BalanceAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(auCode), 0)
}
func BalanceAddCurrency(builder *flatbuffers.Builder, currency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(currency), 0)
}
func BalanceAddType(builder *flatbuffers.Builder, type_ AccountType) {
	builder.PrependInt16Slot(3, int16(type_), 0)
}
func BalanceAddNetAsset(builder *flatbuffers.Builder, netAsset float64) {
	builder.PrependFloat64Slot(4, netAsset, 0.0)
}
func BalanceAddTotalAssetInitial(builder *flatbuffers.Builder, totalAssetInitial float64) {
	builder.PrependFloat64Slot(5, totalAssetInitial, 0.0)
}
func BalanceAddTotalAsset(builder *flatbuffers.Builder, totalAsset float64) {
	builder.PrependFloat64Slot(6, totalAsset, 0.0)
}
func BalanceAddEquityInitial(builder *flatbuffers.Builder, equityInitial float64) {
	builder.PrependFloat64Slot(7, equityInitial, 0.0)
}
func BalanceAddEquity(builder *flatbuffers.Builder, equity float64) {
	builder.PrependFloat64Slot(8, equity, 0.0)
}
func BalanceAddEquityInTransit(builder *flatbuffers.Builder, equityInTransit float64) {
	builder.PrependFloat64Slot(9, equityInTransit, 0.0)
}
func BalanceAddEquityDeposit(builder *flatbuffers.Builder, equityDeposit float64) {
	builder.PrependFloat64Slot(10, equityDeposit, 0.0)
}
func BalanceAddEquityWithdraw(builder *flatbuffers.Builder, equityWithdraw float64) {
	builder.PrependFloat64Slot(11, equityWithdraw, 0.0)
}
func BalanceAddNetEquityTraded(builder *flatbuffers.Builder, netEquityTraded float64) {
	builder.PrependFloat64Slot(12, netEquityTraded, 0.0)
}
func BalanceAddEquityBuy(builder *flatbuffers.Builder, equityBuy float64) {
	builder.PrependFloat64Slot(13, equityBuy, 0.0)
}
func BalanceAddEquitySell(builder *flatbuffers.Builder, equitySell float64) {
	builder.PrependFloat64Slot(14, equitySell, 0.0)
}
func BalanceAddFundInitial(builder *flatbuffers.Builder, fundInitial float64) {
	builder.PrependFloat64Slot(15, fundInitial, 0.0)
}
func BalanceAddFundDepositWithdraw(builder *flatbuffers.Builder, fundDepositWithdraw float64) {
	builder.PrependFloat64Slot(16, fundDepositWithdraw, 0.0)
}
func BalanceAddFundDeposit(builder *flatbuffers.Builder, fundDeposit float64) {
	builder.PrependFloat64Slot(17, fundDeposit, 0.0)
}
func BalanceAddFundWithdraw(builder *flatbuffers.Builder, fundWithdraw float64) {
	builder.PrependFloat64Slot(18, fundWithdraw, 0.0)
}
func BalanceAddFundAvailable(builder *flatbuffers.Builder, fundAvailable float64) {
	builder.PrependFloat64Slot(19, fundAvailable, 0.0)
}
func BalanceAddFundInTransit(builder *flatbuffers.Builder, fundInTransit float64) {
	builder.PrependFloat64Slot(20, fundInTransit, 0.0)
}
func BalanceAddFundFrozen(builder *flatbuffers.Builder, fundFrozen float64) {
	builder.PrependFloat64Slot(21, fundFrozen, 0.0)
}
func BalanceAddBalance(builder *flatbuffers.Builder, balance float64) {
	builder.PrependFloat64Slot(22, balance, 0.0)
}
func BalanceAddTotalLiabilityInitial(builder *flatbuffers.Builder, totalLiabilityInitial float64) {
	builder.PrependFloat64Slot(23, totalLiabilityInitial, 0.0)
}
func BalanceAddTotalLiability(builder *flatbuffers.Builder, totalLiability float64) {
	builder.PrependFloat64Slot(24, totalLiability, 0.0)
}
func BalanceAddCashDebtInitial(builder *flatbuffers.Builder, cashDebtInitial float64) {
	builder.PrependFloat64Slot(25, cashDebtInitial, 0.0)
}
func BalanceAddCashDebt(builder *flatbuffers.Builder, cashDebt float64) {
	builder.PrependFloat64Slot(26, cashDebt, 0.0)
}
func BalanceAddSecurityDebtInitial(builder *flatbuffers.Builder, securityDebtInitial float64) {
	builder.PrependFloat64Slot(27, securityDebtInitial, 0.0)
}
func BalanceAddSecurityDebt(builder *flatbuffers.Builder, securityDebt float64) {
	builder.PrependFloat64Slot(28, securityDebt, 0.0)
}
func BalanceAddCommission(builder *flatbuffers.Builder, commission float64) {
	builder.PrependFloat64Slot(29, commission, 0.0)
}
func BalanceAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(30, createTime, 0)
}
func BalanceAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(31, updateTime, 0)
}
func BalanceAddSettleTime(builder *flatbuffers.Builder, settleTime int64) {
	builder.PrependInt64Slot(32, settleTime, 0)
}
func BalanceAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(33, tradeDate, 0)
}
func BalanceAddIsSettled(builder *flatbuffers.Builder, isSettled int16) {
	builder.PrependInt16Slot(34, isSettled, 0)
}
func BalanceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
