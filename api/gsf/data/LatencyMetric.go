// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LatencyMetricT struct {
	Date int64 `json:"date"`
	SzTickma float64 `json:"sz_tickma"`
	SzTickstd float64 `json:"sz_tickstd"`
	SzZbma float64 `json:"sz_zbma"`
	SzZbstd float64 `json:"sz_zbstd"`
	ShTickma float64 `json:"sh_tickma"`
	ShTickstd float64 `json:"sh_tickstd"`
	ShZbma float64 `json:"sh_zbma"`
	ShZbstd float64 `json:"sh_zbstd"`
	SzTickerror float64 `json:"sz_tickerror"`
	SzZberror float64 `json:"sz_zberror"`
	ShTickerror float64 `json:"sh_tickerror"`
	ShZberror float64 `json:"sh_zberror"`
	Errornum float64 `json:"errornum"`
}

func (t *LatencyMetricT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	LatencyMetricStart(builder)
	LatencyMetricAddDate(builder, t.Date)
	LatencyMetricAddSzTickma(builder, t.SzTickma)
	LatencyMetricAddSzTickstd(builder, t.SzTickstd)
	LatencyMetricAddSzZbma(builder, t.SzZbma)
	LatencyMetricAddSzZbstd(builder, t.SzZbstd)
	LatencyMetricAddShTickma(builder, t.ShTickma)
	LatencyMetricAddShTickstd(builder, t.ShTickstd)
	LatencyMetricAddShZbma(builder, t.ShZbma)
	LatencyMetricAddShZbstd(builder, t.ShZbstd)
	LatencyMetricAddSzTickerror(builder, t.SzTickerror)
	LatencyMetricAddSzZberror(builder, t.SzZberror)
	LatencyMetricAddShTickerror(builder, t.ShTickerror)
	LatencyMetricAddShZberror(builder, t.ShZberror)
	LatencyMetricAddErrornum(builder, t.Errornum)
	return LatencyMetricEnd(builder)
}

func (rcv *LatencyMetric) UnPackTo(t *LatencyMetricT) {
	t.Date = rcv.Date()
	t.SzTickma = rcv.SzTickma()
	t.SzTickstd = rcv.SzTickstd()
	t.SzZbma = rcv.SzZbma()
	t.SzZbstd = rcv.SzZbstd()
	t.ShTickma = rcv.ShTickma()
	t.ShTickstd = rcv.ShTickstd()
	t.ShZbma = rcv.ShZbma()
	t.ShZbstd = rcv.ShZbstd()
	t.SzTickerror = rcv.SzTickerror()
	t.SzZberror = rcv.SzZberror()
	t.ShTickerror = rcv.ShTickerror()
	t.ShZberror = rcv.ShZberror()
	t.Errornum = rcv.Errornum()
}

func (rcv *LatencyMetric) UnPack() *LatencyMetricT {
	if rcv == nil {
		return nil
	}
	t := &LatencyMetricT{}
	rcv.UnPackTo(t)
	return t
}

type LatencyMetric struct {
	_tab flatbuffers.Table
}

func GetRootAsLatencyMetric(buf []byte, offset flatbuffers.UOffsetT) *LatencyMetric {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LatencyMetric{}
	x.Init(buf, n+offset)
	return x
}

func FinishLatencyMetricBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsLatencyMetric(buf []byte, offset flatbuffers.UOffsetT) *LatencyMetric {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LatencyMetric{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLatencyMetricBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *LatencyMetric) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LatencyMetric) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LatencyMetric) Date() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LatencyMetric) MutateDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *LatencyMetric) SzTickma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateSzTickma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *LatencyMetric) SzTickstd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateSzTickstd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *LatencyMetric) SzZbma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateSzZbma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *LatencyMetric) SzZbstd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateSzZbstd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *LatencyMetric) ShTickma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateShTickma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *LatencyMetric) ShTickstd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateShTickstd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func (rcv *LatencyMetric) ShZbma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateShZbma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

func (rcv *LatencyMetric) ShZbstd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LatencyMetric) MutateShZbstd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

///若深市tick的延迟std大于40或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) SzTickerror() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///若深市tick的延迟std大于40或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) MutateSzTickerror(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

///若深市zb的延迟std大于20或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) SzZberror() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///若深市zb的延迟std大于20或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) MutateSzZberror(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

///若沪市tick的延迟std大于600或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) ShTickerror() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///若沪市tick的延迟std大于600或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) MutateShTickerror(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

///若沪市zb的延迟std大于200或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) ShZberror() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///若沪市zb的延迟std大于200或者等于0,则该值为1,正常为0
func (rcv *LatencyMetric) MutateShZberror(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

///上述error的和，数字代表4项中出问题的数目
func (rcv *LatencyMetric) Errornum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///上述error的和，数字代表4项中出问题的数目
func (rcv *LatencyMetric) MutateErrornum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

func LatencyMetricStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func LatencyMetricAddDate(builder *flatbuffers.Builder, date int64) {
	builder.PrependInt64Slot(0, date, 0)
}
func LatencyMetricAddSzTickma(builder *flatbuffers.Builder, szTickma float64) {
	builder.PrependFloat64Slot(1, szTickma, 0.0)
}
func LatencyMetricAddSzTickstd(builder *flatbuffers.Builder, szTickstd float64) {
	builder.PrependFloat64Slot(2, szTickstd, 0.0)
}
func LatencyMetricAddSzZbma(builder *flatbuffers.Builder, szZbma float64) {
	builder.PrependFloat64Slot(3, szZbma, 0.0)
}
func LatencyMetricAddSzZbstd(builder *flatbuffers.Builder, szZbstd float64) {
	builder.PrependFloat64Slot(4, szZbstd, 0.0)
}
func LatencyMetricAddShTickma(builder *flatbuffers.Builder, shTickma float64) {
	builder.PrependFloat64Slot(5, shTickma, 0.0)
}
func LatencyMetricAddShTickstd(builder *flatbuffers.Builder, shTickstd float64) {
	builder.PrependFloat64Slot(6, shTickstd, 0.0)
}
func LatencyMetricAddShZbma(builder *flatbuffers.Builder, shZbma float64) {
	builder.PrependFloat64Slot(7, shZbma, 0.0)
}
func LatencyMetricAddShZbstd(builder *flatbuffers.Builder, shZbstd float64) {
	builder.PrependFloat64Slot(8, shZbstd, 0.0)
}
func LatencyMetricAddSzTickerror(builder *flatbuffers.Builder, szTickerror float64) {
	builder.PrependFloat64Slot(9, szTickerror, 0.0)
}
func LatencyMetricAddSzZberror(builder *flatbuffers.Builder, szZberror float64) {
	builder.PrependFloat64Slot(10, szZberror, 0.0)
}
func LatencyMetricAddShTickerror(builder *flatbuffers.Builder, shTickerror float64) {
	builder.PrependFloat64Slot(11, shTickerror, 0.0)
}
func LatencyMetricAddShZberror(builder *flatbuffers.Builder, shZberror float64) {
	builder.PrependFloat64Slot(12, shZberror, 0.0)
}
func LatencyMetricAddErrornum(builder *flatbuffers.Builder, errornum float64) {
	builder.PrependFloat64Slot(13, errornum, 0.0)
}
func LatencyMetricEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
