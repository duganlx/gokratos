// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ZbTradeT struct {
	EpochLocalTime int64 `json:"epoch_local_time"`
	Symbol string `json:"symbol"`
	Market string `json:"market"`
	StreamId uint32 `json:"stream_id"`
	EpochExchgTime int64 `json:"epoch_exchg_time"`
	Channel uint16 `json:"channel"`
	BizIndex uint64 `json:"biz_index"`
	TransactionIndex uint64 `json:"transaction_index"`
	BidSeqNum uint64 `json:"bid_seq_num"`
	AskSeqNum uint64 `json:"ask_seq_num"`
	Price float64 `json:"price"`
	Volume int64 `json:"volume"`
	ExecType string `json:"exec_type"`
	LocalTime uint32 `json:"local_time"`
	ExchgTime uint32 `json:"exchg_time"`
	TradeDate int64 `json:"trade_date"`
	Key int32 `json:"key"`
	EamCode int64 `json:"eam_code"`
	Aop float64 `json:"aop"`
	Aov int64 `json:"aov"`
	Bop float64 `json:"bop"`
	Bov int64 `json:"bov"`
}

func (t *ZbTradeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	symbolOffset := flatbuffers.UOffsetT(0)
	if t.Symbol != "" {
		symbolOffset = builder.CreateString(t.Symbol)
	}
	marketOffset := flatbuffers.UOffsetT(0)
	if t.Market != "" {
		marketOffset = builder.CreateString(t.Market)
	}
	execTypeOffset := flatbuffers.UOffsetT(0)
	if t.ExecType != "" {
		execTypeOffset = builder.CreateString(t.ExecType)
	}
	ZbTradeStart(builder)
	ZbTradeAddEpochLocalTime(builder, t.EpochLocalTime)
	ZbTradeAddSymbol(builder, symbolOffset)
	ZbTradeAddMarket(builder, marketOffset)
	ZbTradeAddStreamId(builder, t.StreamId)
	ZbTradeAddEpochExchgTime(builder, t.EpochExchgTime)
	ZbTradeAddChannel(builder, t.Channel)
	ZbTradeAddBizIndex(builder, t.BizIndex)
	ZbTradeAddTransactionIndex(builder, t.TransactionIndex)
	ZbTradeAddBidSeqNum(builder, t.BidSeqNum)
	ZbTradeAddAskSeqNum(builder, t.AskSeqNum)
	ZbTradeAddPrice(builder, t.Price)
	ZbTradeAddVolume(builder, t.Volume)
	ZbTradeAddExecType(builder, execTypeOffset)
	ZbTradeAddLocalTime(builder, t.LocalTime)
	ZbTradeAddExchgTime(builder, t.ExchgTime)
	ZbTradeAddTradeDate(builder, t.TradeDate)
	ZbTradeAddKey(builder, t.Key)
	ZbTradeAddEamCode(builder, t.EamCode)
	ZbTradeAddAop(builder, t.Aop)
	ZbTradeAddAov(builder, t.Aov)
	ZbTradeAddBop(builder, t.Bop)
	ZbTradeAddBov(builder, t.Bov)
	return ZbTradeEnd(builder)
}

func (rcv *ZbTrade) UnPackTo(t *ZbTradeT) {
	t.EpochLocalTime = rcv.EpochLocalTime()
	t.Symbol = string(rcv.Symbol())
	t.Market = string(rcv.Market())
	t.StreamId = rcv.StreamId()
	t.EpochExchgTime = rcv.EpochExchgTime()
	t.Channel = rcv.Channel()
	t.BizIndex = rcv.BizIndex()
	t.TransactionIndex = rcv.TransactionIndex()
	t.BidSeqNum = rcv.BidSeqNum()
	t.AskSeqNum = rcv.AskSeqNum()
	t.Price = rcv.Price()
	t.Volume = rcv.Volume()
	t.ExecType = string(rcv.ExecType())
	t.LocalTime = rcv.LocalTime()
	t.ExchgTime = rcv.ExchgTime()
	t.TradeDate = rcv.TradeDate()
	t.Key = rcv.Key()
	t.EamCode = rcv.EamCode()
	t.Aop = rcv.Aop()
	t.Aov = rcv.Aov()
	t.Bop = rcv.Bop()
	t.Bov = rcv.Bov()
}

func (rcv *ZbTrade) UnPack() *ZbTradeT {
	if rcv == nil {
		return nil
	}
	t := &ZbTradeT{}
	rcv.UnPackTo(t)
	return t
}

type ZbTrade struct {
	_tab flatbuffers.Table
}

func GetRootAsZbTrade(buf []byte, offset flatbuffers.UOffsetT) *ZbTrade {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ZbTrade{}
	x.Init(buf, n+offset)
	return x
}

func FinishZbTradeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsZbTrade(buf []byte, offset flatbuffers.UOffsetT) *ZbTrade {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ZbTrade{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedZbTradeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ZbTrade) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ZbTrade) Table() flatbuffers.Table {
	return rcv._tab
}

/// 本地接收日期时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *ZbTrade) EpochLocalTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 本地接收日期时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *ZbTrade) MutateEpochLocalTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

/// 证券代码
func (rcv *ZbTrade) Symbol() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 证券代码
///市场
///SZ,SH,HK,CF,BJ,O,N
func (rcv *ZbTrade) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

///市场
///SZ,SH,HK,CF,BJ,O,N
/// 行情类别，新增
func (rcv *ZbTrade) StreamId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// 行情类别，新增
func (rcv *ZbTrade) MutateStreamId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

/// 交易所行情日期时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *ZbTrade) EpochExchgTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易所行情日期时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *ZbTrade) MutateEpochExchgTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

/// 通道，新增
func (rcv *ZbTrade) Channel() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

/// 通道，新增
func (rcv *ZbTrade) MutateChannel(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

/// 业务序列号(沪市特有)
/// 每个通道（Channel）内逐笔成交数据与逐笔委托数据统一排序生成业务序列号（BizIndex），并从 1 开始递增。新增
func (rcv *ZbTrade) BizIndex() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// 业务序列号(沪市特有)
/// 每个通道（Channel）内逐笔成交数据与逐笔委托数据统一排序生成业务序列号（BizIndex），并从 1 开始递增。新增
func (rcv *ZbTrade) MutateBizIndex(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

/// 成交编号 sortIndex
func (rcv *ZbTrade) TransactionIndex() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// 成交编号 sortIndex
func (rcv *ZbTrade) MutateTransactionIndex(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

/// 买方委托索引 bidorder, 对应zbOrder中的order_no
func (rcv *ZbTrade) BidSeqNum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// 买方委托索引 bidorder, 对应zbOrder中的order_no
func (rcv *ZbTrade) MutateBidSeqNum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

/// 卖方委托索引 askorder, 对应zbOrder中的order_no
func (rcv *ZbTrade) AskSeqNum() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖方委托索引 askorder, 对应zbOrder中的order_no
func (rcv *ZbTrade) MutateAskSeqNum(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

/// 成交价格price
func (rcv *ZbTrade) Price() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 成交价格price
func (rcv *ZbTrade) MutatePrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 成交数量 volume
func (rcv *ZbTrade) Volume() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 成交数量 volume
func (rcv *ZbTrade) MutateVolume(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

/// ([0]买卖方向:买'B',卖'S',撤'C') bsFlag
func (rcv *ZbTrade) ExecType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ([0]买卖方向:买'B',卖'S',撤'C') bsFlag
/// 本地接收时间(整数形式)，HHMMSSmmm 样例：93000500或者153000000
func (rcv *ZbTrade) LocalTime() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// 本地接收时间(整数形式)，HHMMSSmmm 样例：93000500或者153000000
func (rcv *ZbTrade) MutateLocalTime(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

/// 交易所时间(整数形式)，HHMMSSmmm 样例：93000500或者153000000
func (rcv *ZbTrade) ExchgTime() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易所时间(整数形式)，HHMMSSmmm 样例：93000500或者153000000
func (rcv *ZbTrade) MutateExchgTime(n uint32) bool {
	return rcv._tab.MutateUint32Slot(32, n)
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *ZbTrade) TradeDate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 交易日，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *ZbTrade) MutateTradeDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(34, n)
}

/// code_id的hash值，股票为code_id的数字，期货为code_id字符串的hash值
func (rcv *ZbTrade) Key() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

/// code_id的hash值，股票为code_id的数字，期货为code_id字符串的hash值
func (rcv *ZbTrade) MutateKey(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

///double
func (rcv *ZbTrade) EamCode() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

///double
func (rcv *ZbTrade) MutateEamCode(n int64) bool {
	return rcv._tab.MutateInt64Slot(38, n)
}

/// 卖单的PxIdx【回验撮合专用】
func (rcv *ZbTrade) Aop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return -1.0
}

/// 卖单的PxIdx【回验撮合专用】
func (rcv *ZbTrade) MutateAop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// 卖单的量【回验撮合专用】
func (rcv *ZbTrade) Aov() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 卖单的量【回验撮合专用】
func (rcv *ZbTrade) MutateAov(n int64) bool {
	return rcv._tab.MutateInt64Slot(42, n)
}

/// 买单的PxIdx【回验撮合专用】
func (rcv *ZbTrade) Bop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return -1.0
}

/// 买单的PxIdx【回验撮合专用】
func (rcv *ZbTrade) MutateBop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// 买单的量【回验撮合专用】
func (rcv *ZbTrade) Bov() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 买单的量【回验撮合专用】
func (rcv *ZbTrade) MutateBov(n int64) bool {
	return rcv._tab.MutateInt64Slot(46, n)
}

func ZbTradeStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func ZbTradeAddEpochLocalTime(builder *flatbuffers.Builder, epochLocalTime int64) {
	builder.PrependInt64Slot(0, epochLocalTime, 0)
}
func ZbTradeAddSymbol(builder *flatbuffers.Builder, symbol flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(symbol), 0)
}
func ZbTradeAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(market), 0)
}
func ZbTradeAddStreamId(builder *flatbuffers.Builder, streamId uint32) {
	builder.PrependUint32Slot(3, streamId, 0)
}
func ZbTradeAddEpochExchgTime(builder *flatbuffers.Builder, epochExchgTime int64) {
	builder.PrependInt64Slot(4, epochExchgTime, 0)
}
func ZbTradeAddChannel(builder *flatbuffers.Builder, channel uint16) {
	builder.PrependUint16Slot(5, channel, 0)
}
func ZbTradeAddBizIndex(builder *flatbuffers.Builder, bizIndex uint64) {
	builder.PrependUint64Slot(6, bizIndex, 0)
}
func ZbTradeAddTransactionIndex(builder *flatbuffers.Builder, transactionIndex uint64) {
	builder.PrependUint64Slot(7, transactionIndex, 0)
}
func ZbTradeAddBidSeqNum(builder *flatbuffers.Builder, bidSeqNum uint64) {
	builder.PrependUint64Slot(8, bidSeqNum, 0)
}
func ZbTradeAddAskSeqNum(builder *flatbuffers.Builder, askSeqNum uint64) {
	builder.PrependUint64Slot(9, askSeqNum, 0)
}
func ZbTradeAddPrice(builder *flatbuffers.Builder, price float64) {
	builder.PrependFloat64Slot(10, price, 0.0)
}
func ZbTradeAddVolume(builder *flatbuffers.Builder, volume int64) {
	builder.PrependInt64Slot(11, volume, 0)
}
func ZbTradeAddExecType(builder *flatbuffers.Builder, execType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(execType), 0)
}
func ZbTradeAddLocalTime(builder *flatbuffers.Builder, localTime uint32) {
	builder.PrependUint32Slot(13, localTime, 0)
}
func ZbTradeAddExchgTime(builder *flatbuffers.Builder, exchgTime uint32) {
	builder.PrependUint32Slot(14, exchgTime, 0)
}
func ZbTradeAddTradeDate(builder *flatbuffers.Builder, tradeDate int64) {
	builder.PrependInt64Slot(15, tradeDate, 0)
}
func ZbTradeAddKey(builder *flatbuffers.Builder, key int32) {
	builder.PrependInt32Slot(16, key, -1)
}
func ZbTradeAddEamCode(builder *flatbuffers.Builder, eamCode int64) {
	builder.PrependInt64Slot(17, eamCode, 0)
}
func ZbTradeAddAop(builder *flatbuffers.Builder, aop float64) {
	builder.PrependFloat64Slot(18, aop, -1.0)
}
func ZbTradeAddAov(builder *flatbuffers.Builder, aov int64) {
	builder.PrependInt64Slot(19, aov, 0)
}
func ZbTradeAddBop(builder *flatbuffers.Builder, bop float64) {
	builder.PrependFloat64Slot(20, bop, -1.0)
}
func ZbTradeAddBov(builder *flatbuffers.Builder, bov int64) {
	builder.PrependInt64Slot(21, bov, 0)
}
func ZbTradeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
