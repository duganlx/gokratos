// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SetDataCommandT struct {
	Time int64 `json:"time"`
	ServiceName string `json:"service_name"`
	Data string `json:"data"`
}

func (t *SetDataCommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	serviceNameOffset := flatbuffers.UOffsetT(0)
	if t.ServiceName != "" {
		serviceNameOffset = builder.CreateString(t.ServiceName)
	}
	dataOffset := flatbuffers.UOffsetT(0)
	if t.Data != "" {
		dataOffset = builder.CreateString(t.Data)
	}
	SetDataCommandStart(builder)
	SetDataCommandAddTime(builder, t.Time)
	SetDataCommandAddServiceName(builder, serviceNameOffset)
	SetDataCommandAddData(builder, dataOffset)
	return SetDataCommandEnd(builder)
}

func (rcv *SetDataCommand) UnPackTo(t *SetDataCommandT) {
	t.Time = rcv.Time()
	t.ServiceName = string(rcv.ServiceName())
	t.Data = string(rcv.Data())
}

func (rcv *SetDataCommand) UnPack() *SetDataCommandT {
	if rcv == nil {
		return nil
	}
	t := &SetDataCommandT{}
	rcv.UnPackTo(t)
	return t
}

type SetDataCommand struct {
	_tab flatbuffers.Table
}

func GetRootAsSetDataCommand(buf []byte, offset flatbuffers.UOffsetT) *SetDataCommand {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetDataCommand{}
	x.Init(buf, n+offset)
	return x
}

func FinishSetDataCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSetDataCommand(buf []byte, offset flatbuffers.UOffsetT) *SetDataCommand {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetDataCommand{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSetDataCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SetDataCommand) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetDataCommand) Table() flatbuffers.Table {
	return rcv._tab
}

/// 时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *SetDataCommand) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *SetDataCommand) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SetDataCommand) ServiceName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SetDataCommand) Data() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SetDataCommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SetDataCommandAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(0, time, 0)
}
func SetDataCommandAddServiceName(builder *flatbuffers.Builder, serviceName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(serviceName), 0)
}
func SetDataCommandAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func SetDataCommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
