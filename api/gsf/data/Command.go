// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CommandT struct {
	CommandType CommandType `json:"command_type"`
	CommandData string `json:"command_data"`
}

func (t *CommandT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	commandDataOffset := flatbuffers.UOffsetT(0)
	if t.CommandData != "" {
		commandDataOffset = builder.CreateString(t.CommandData)
	}
	CommandStart(builder)
	CommandAddCommandType(builder, t.CommandType)
	CommandAddCommandData(builder, commandDataOffset)
	return CommandEnd(builder)
}

func (rcv *Command) UnPackTo(t *CommandT) {
	t.CommandType = rcv.CommandType()
	t.CommandData = string(rcv.CommandData())
}

func (rcv *Command) UnPack() *CommandT {
	if rcv == nil {
		return nil
	}
	t := &CommandT{}
	rcv.UnPackTo(t)
	return t
}

type Command struct {
	_tab flatbuffers.Table
}

func GetRootAsCommand(buf []byte, offset flatbuffers.UOffsetT) *Command {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Command{}
	x.Init(buf, n+offset)
	return x
}

func FinishCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCommand(buf []byte, offset flatbuffers.UOffsetT) *Command {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Command{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCommandBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Command) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Command) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Command) CommandType() CommandType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CommandType(rcv._tab.GetUint16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Command) MutateCommandType(n CommandType) bool {
	return rcv._tab.MutateUint16Slot(4, uint16(n))
}

func (rcv *Command) CommandData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CommandStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CommandAddCommandType(builder *flatbuffers.Builder, commandType CommandType) {
	builder.PrependUint16Slot(0, uint16(commandType), 0)
}
func CommandAddCommandData(builder *flatbuffers.Builder, commandData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(commandData), 0)
}
func CommandEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
