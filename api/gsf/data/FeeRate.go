// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FeeRateT struct {
	Market string `json:"market"`
	Target string `json:"target"`
	Action FeeRateAction `json:"action"`
	Offset FeeRateOffset `json:"offset"`
	Currency string `json:"currency"`
	CommissionFixed float64 `json:"commission_fixed"`
	CommissionRatio float64 `json:"commission_ratio"`
	StampRatio float64 `json:"stamp_ratio"`
	OtherFixed float64 `json:"other_fixed"`
	OtherRatio float64 `json:"other_ratio"`
	AuCode string `json:"au_code"`
	CreateTime int64 `json:"create_time"`
	UpdateTime int64 `json:"update_time"`
	EffectiveDate int32 `json:"effective_date"`
}

func (t *FeeRateT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	marketOffset := flatbuffers.UOffsetT(0)
	if t.Market != "" {
		marketOffset = builder.CreateString(t.Market)
	}
	targetOffset := flatbuffers.UOffsetT(0)
	if t.Target != "" {
		targetOffset = builder.CreateString(t.Target)
	}
	currencyOffset := flatbuffers.UOffsetT(0)
	if t.Currency != "" {
		currencyOffset = builder.CreateString(t.Currency)
	}
	auCodeOffset := flatbuffers.UOffsetT(0)
	if t.AuCode != "" {
		auCodeOffset = builder.CreateString(t.AuCode)
	}
	FeeRateStart(builder)
	FeeRateAddMarket(builder, marketOffset)
	FeeRateAddTarget(builder, targetOffset)
	FeeRateAddAction(builder, t.Action)
	FeeRateAddOffset(builder, t.Offset)
	FeeRateAddCurrency(builder, currencyOffset)
	FeeRateAddCommissionFixed(builder, t.CommissionFixed)
	FeeRateAddCommissionRatio(builder, t.CommissionRatio)
	FeeRateAddStampRatio(builder, t.StampRatio)
	FeeRateAddOtherFixed(builder, t.OtherFixed)
	FeeRateAddOtherRatio(builder, t.OtherRatio)
	FeeRateAddAuCode(builder, auCodeOffset)
	FeeRateAddCreateTime(builder, t.CreateTime)
	FeeRateAddUpdateTime(builder, t.UpdateTime)
	FeeRateAddEffectiveDate(builder, t.EffectiveDate)
	return FeeRateEnd(builder)
}

func (rcv *FeeRate) UnPackTo(t *FeeRateT) {
	t.Market = string(rcv.Market())
	t.Target = string(rcv.Target())
	t.Action = rcv.Action()
	t.Offset = rcv.Offset()
	t.Currency = string(rcv.Currency())
	t.CommissionFixed = rcv.CommissionFixed()
	t.CommissionRatio = rcv.CommissionRatio()
	t.StampRatio = rcv.StampRatio()
	t.OtherFixed = rcv.OtherFixed()
	t.OtherRatio = rcv.OtherRatio()
	t.AuCode = string(rcv.AuCode())
	t.CreateTime = rcv.CreateTime()
	t.UpdateTime = rcv.UpdateTime()
	t.EffectiveDate = rcv.EffectiveDate()
}

func (rcv *FeeRate) UnPack() *FeeRateT {
	if rcv == nil {
		return nil
	}
	t := &FeeRateT{}
	rcv.UnPackTo(t)
	return t
}

type FeeRate struct {
	_tab flatbuffers.Table
}

func GetRootAsFeeRate(buf []byte, offset flatbuffers.UOffsetT) *FeeRate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FeeRate{}
	x.Init(buf, n+offset)
	return x
}

func FinishFeeRateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFeeRate(buf []byte, offset flatbuffers.UOffsetT) *FeeRate {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FeeRate{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFeeRateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FeeRate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FeeRate) Table() flatbuffers.Table {
	return rcv._tab
}

/// 市场
/// SZ,SH,HK,CF,BJ,O,N
func (rcv *FeeRate) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 市场
/// SZ,SH,HK,CF,BJ,O,N
/// 目标标的 - 通用属性，用于表示改费率应用于哪类标的，可以是具体的symbol，也可以是product或者某关键字
func (rcv *FeeRate) Target() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 目标标的 - 通用属性，用于表示改费率应用于哪类标的，可以是具体的symbol，也可以是product或者某关键字
/// 操作类型 - BUY|SELL|CANCEL
func (rcv *FeeRate) Action() FeeRateAction {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return FeeRateAction(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 操作类型 - BUY|SELL|CANCEL
func (rcv *FeeRate) MutateAction(n FeeRateAction) bool {
	return rcv._tab.MutateInt16Slot(8, int16(n))
}

/// 开平类型 - OPEN|CLOSE|CLOSE_TODAY|CLOSE_HISTORY
func (rcv *FeeRate) Offset() FeeRateOffset {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return FeeRateOffset(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

/// 开平类型 - OPEN|CLOSE|CLOSE_TODAY|CLOSE_HISTORY
func (rcv *FeeRate) MutateOffset(n FeeRateOffset) bool {
	return rcv._tab.MutateInt16Slot(10, int16(n))
}

/// 货币 - CNY|USD|HKD
func (rcv *FeeRate) Currency() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 货币 - CNY|USD|HKD
/// 佣金费率 - 固定费率
func (rcv *FeeRate) CommissionFixed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 佣金费率 - 固定费率
func (rcv *FeeRate) MutateCommissionFixed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// 佣金费率 - 按比例计算
func (rcv *FeeRate) CommissionRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 佣金费率 - 按比例计算
func (rcv *FeeRate) MutateCommissionRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// 印花税 - 按比例计算
func (rcv *FeeRate) StampRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 印花税 - 按比例计算
func (rcv *FeeRate) MutateStampRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// 其他费率 - 固定费率
func (rcv *FeeRate) OtherFixed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 其他费率 - 固定费率
func (rcv *FeeRate) MutateOtherFixed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// 其他费率 - 按比例计算
func (rcv *FeeRate) OtherRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 其他费率 - 按比例计算
func (rcv *FeeRate) MutateOtherRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// 资产单元
func (rcv *FeeRate) AuCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 资产单元
/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *FeeRate) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 创建时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *FeeRate) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *FeeRate) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// 更新时间，Epoch时间(13位数字，UTC时区)，样例：1676017139000
func (rcv *FeeRate) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

/// 生效日期，yyyymmdd
func (rcv *FeeRate) EffectiveDate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// 生效日期，yyyymmdd
func (rcv *FeeRate) MutateEffectiveDate(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func FeeRateStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func FeeRateAddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(market), 0)
}
func FeeRateAddTarget(builder *flatbuffers.Builder, target flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(target), 0)
}
func FeeRateAddAction(builder *flatbuffers.Builder, action FeeRateAction) {
	builder.PrependInt16Slot(2, int16(action), 0)
}
func FeeRateAddOffset(builder *flatbuffers.Builder, offset FeeRateOffset) {
	builder.PrependInt16Slot(3, int16(offset), 0)
}
func FeeRateAddCurrency(builder *flatbuffers.Builder, currency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(currency), 0)
}
func FeeRateAddCommissionFixed(builder *flatbuffers.Builder, commissionFixed float64) {
	builder.PrependFloat64Slot(5, commissionFixed, 0.0)
}
func FeeRateAddCommissionRatio(builder *flatbuffers.Builder, commissionRatio float64) {
	builder.PrependFloat64Slot(6, commissionRatio, 0.0)
}
func FeeRateAddStampRatio(builder *flatbuffers.Builder, stampRatio float64) {
	builder.PrependFloat64Slot(7, stampRatio, 0.0)
}
func FeeRateAddOtherFixed(builder *flatbuffers.Builder, otherFixed float64) {
	builder.PrependFloat64Slot(8, otherFixed, 0.0)
}
func FeeRateAddOtherRatio(builder *flatbuffers.Builder, otherRatio float64) {
	builder.PrependFloat64Slot(9, otherRatio, 0.0)
}
func FeeRateAddAuCode(builder *flatbuffers.Builder, auCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(auCode), 0)
}
func FeeRateAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(11, createTime, 0)
}
func FeeRateAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(12, updateTime, 0)
}
func FeeRateAddEffectiveDate(builder *flatbuffers.Builder, effectiveDate int32) {
	builder.PrependInt32Slot(13, effectiveDate, 0)
}
func FeeRateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
